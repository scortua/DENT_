<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nanoFramework.Graphics</name>
    </assembly>
    <members>
        <member name="T:nanoFramework.UI.Input.ButtonDevice">
            <summary>
                The ButtonDevice class represents the button device to the
                members of a context.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Input.ButtonDevice.Target">
            <summary>
                Returns the element that input from this device is sent to.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Input.ButtonDevice.DeviceType">
            <summary>
             Device Type
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.ButtonDevice.Focus(nanoFramework.Presentation.UIElement)">
            <summary>
                Focuses the button input on a particular element.
            </summary>
            <param name="obj">
                The element to focus the button pad on.
            </param>
            <returns>Element focused to</returns>
        </member>
        <member name="M:nanoFramework.UI.Input.ButtonDevice.IsButtonDown(nanoFramework.UI.Input.Button)">
            <summary>
                Returns whether or not the specified button is down.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.ButtonDevice.IsButtonUp(nanoFramework.UI.Input.Button)">
            <summary>
                Returns whether or not the specified button is up.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.ButtonDevice.IsButtonHeld(nanoFramework.UI.Input.Button)">
            <summary>
                Returns whether or not the specified button is held.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.ButtonDevice.GetButtonState(nanoFramework.UI.Input.Button)">
            <summary>
                Returns the state of the specified button.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.Button">
            <summary>
            The button or key.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.None">
            <summary>None.</summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_LBUTTON">
            <summary>
            Left mouse button
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_RBUTTON">
            <summary>
            Right mouse button
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_CANCEL">
            <summary>
            Control-break processing
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_MBUTTON">
            <summary>
            Middle mouse button (three-button mouse)
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_XBUTTON1">
            <summary>
            X1 mouse button
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_XBUTTON2">
            <summary>
            X2 mouse button
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_BACK">
            <summary>
            BACKSPACE key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_TAB">
            <summary>
            TAB key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_CLEAR">
            <summary>
            CLEAR key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_RETURN">
            <summary>
            ENTER key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_SHIFT">
            <summary>
            SHIFT key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_CONTROL">
            <summary>
            CTRL key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_MENU">
            <summary>
            ALT key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_PAUSE">
            <summary>
            PAUSE key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_CAPITAL">
            <summary>
            CAPS LOCK key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_KANA">
            <summary>
            IME Kana mode
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_HANGEUL">
            <summary>
            IME Hanguel mode (maintained for compatibility; use VK_HANGUL)
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_HANGUL">
            <summary>
            IME Hangul mode
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_JUNJA">
            <summary>
            IME Junja mode
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_FINAL">
            <summary>
            IME final mode
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_HANJA">
            <summary>
            IME Hanja mode
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_KANJI">
            <summary>
            IME Kanji mode
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_ESCAPE">
            <summary>
            ESC key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_CONVERT">
            <summary>
            IME convert
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_NONCONVERT">
            <summary>
            IME nonconvert
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_ACCEPT">
            <summary>
            IME accept
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_MODECHANGE">
            <summary>
            IME mode change request
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_SPACE">
            <summary>
            SPACEBAR
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_PRIOR">
            <summary>
            PAGE UP key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_NEXT">
            <summary>
            PAGE DOWN key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_END">
            <summary>
            END key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_HOME">
            <summary>
            HOME key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_LEFT">
            <summary>
            LEFT ARROW key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_UP">
            <summary>
            UP ARROW key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_RIGHT">
            <summary>
            RIGHT ARROW key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_DOWN">
            <summary>
            DOWN ARROW key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_SELECT">
            <summary>
            SELECT key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_PRINT">
            <summary>
            PRINT key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_EXECUTE">
            <summary>
            EXECUTE key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_SNAPSHOT">
            <summary>
            PRINT SCREEN key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_INSERT">
            <summary>
            INS key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_DELETE">
            <summary>
            DEL key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_HELP">
            <summary>
            HELP key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_0">
            <summary>
            0 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_1">
            <summary>
            1 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_2">
            <summary>
            2 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_3">
            <summary>
            3 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_4">
            <summary>
            4 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_5">
            <summary>
            5 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_6">
            <summary>
            6 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_7">
            <summary>
            7 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_8">
            <summary>
            8 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_9">
            <summary>
            9 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_A">
            <summary>
            A key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_B">
            <summary>
            B key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_C">
            <summary>
            C key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_D">
            <summary>
            D key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_E">
            <summary>
            E key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F">
            <summary>
            F key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_G">
            <summary>
            G key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_H">
            <summary>
            H key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_I">
            <summary>
            I key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_J">
            <summary>
            J key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_K">
            <summary>
            K key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_L">
            <summary>
            L key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_M">
            <summary>
            M key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_N">
            <summary>
            N key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_O">
            <summary>
            O key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_P">
            <summary>
            P key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_Q">
            <summary>
            Q key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_R">
            <summary>
            R key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_S">
            <summary>
            S key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_T">
            <summary>
            T key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_U">
            <summary>
            U key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_V">
            <summary>
            V key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_W">
            <summary>
            W key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_X">
            <summary>
            X key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_Y">
            <summary>
            Y key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_Z">
            <summary>
            Z key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_LWIN">
            <summary>
            Left Windows key (Microsoft Natural keyboard) 
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_RWIN">
            <summary>
            Right Windows key (Natural keyboard)
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_APPS">
            <summary>
            Applications key (Natural keyboard)
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_SLEEP">
            <summary>
            Computer Sleep key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_NUMPAD0">
            <summary>
            Numeric keypad 0 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_NUMPAD1">
            <summary>
            Numeric keypad 1 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_NUMPAD2">
            <summary>
            Numeric keypad 2 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_NUMPAD3">
            <summary>
            Numeric keypad 3 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_NUMPAD4">
            <summary>
            Numeric keypad 4 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_NUMPAD5">
            <summary>
            Numeric keypad 5 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_NUMPAD6">
            <summary>
            Numeric keypad 6 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_NUMPAD7">
            <summary>
            Numeric keypad 7 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_NUMPAD8">
            <summary>
            Numeric keypad 8 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_NUMPAD9">
            <summary>
            Numeric keypad 9 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_MULTIPLY">
            <summary>
            Multiply key (*)
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_ADD">
            <summary>
            Add key (+)
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_SEPARATOR">
            <summary>
            Separator key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_SUBTRACT">
            <summary>
            Subtract key (-)
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_DECIMAL">
            <summary>
            Decimal key (. or ,)
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_DIVIDE">
            <summary>
            Divide key (/)
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F1">
            <summary>
            F1 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F2">
            <summary>
            F2 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F3">
            <summary>
            F3 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F4">
            <summary>
            F4 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F5">
            <summary>
            F5 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F6">
            <summary>
            F6 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F7">
            <summary>
            F7 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F8">
            <summary>
            F8 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F9">
            <summary>
            F9 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F10">
            <summary>
            F10 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F11">
            <summary>
            F11 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F12">
            <summary>
            F12 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F13">
            <summary>
            F13 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F14">
            <summary>
            F14 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F15">
            <summary>
            F15 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F16">
            <summary>
            F16 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F17">
            <summary>
            F17 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F18">
            <summary>
            F18 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F19">
            <summary>
            F19 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F20">
            <summary>
            F20 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F21">
            <summary>
            F21 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F22">
            <summary>
            F22 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F23">
            <summary>
            F23 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_F24">
            <summary>
            F24 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_NUMLOCK">
            <summary>
            NUM LOCK key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_SCROLL">
            <summary>
            Scroll lock key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_LSHIFT">
            <summary>
            Left shift key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_RSHIFT">
            <summary>
            Right shift key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_LCONTROL">
            <summary>
            Left control key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_RCONTROL">
            <summary>
            Right control key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_LMENU">
            <summary>
            Left menu key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_RMENU">
            <summary>
            Right menu key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_BROWSER_BACK">
            <summary>
            Browser back key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_BROWSER_FORWARD">
            <summary>
            Browser forward key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_BROWSER_REFRESH">
            <summary>
            Browser refresh key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_BROWSER_STOP">
            <summary>
            Browser stop key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_BROWSER_SEARCH">
            <summary>
            Browser search key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_BROWSER_FAVORITES">
            <summary>
            Browser favorites key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_BROWSER_HOME">
            <summary>
            Browser home key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_VOLUME_MUTE">
            <summary>
            Volume mute key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_VOLUME_DOWN">
            <summary>
            Volume down key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_VOLUME_UP">
            <summary>
            Volume up key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_MEDIA_NEXT_TRACK">
            <summary>
            Media next track key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_MEDIA_PREV_TRACK">
            <summary>
            Media previous track key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_MEDIA_STOP">
            <summary>
            Media stop key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_MEDIA_PLAY_PAUSE">
            <summary>
            Media play pause key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_LAUNCH_MAIL">
            <summary>
            Launch mail key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_LAUNCH_MEDIA_SELECT">
            <summary>
            Launch media select key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_LAUNCH_APP1">
            <summary>
            Launch application 1 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_LAUNCH_APP2">
            <summary>
            Launch application 2 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_1">
            <summary>
            OEM 1 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_PLUS">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_COMMA">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_MINUS">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_PERIOD">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_2">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_3">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_4">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_5">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_6">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_7">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_8">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_AX">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_102">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_ICO_HELP">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_ICO_00">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_PROCESSKEY">
            <summary>
            Clear key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_ICO_CLEAR">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_PACKET">
            <summary>
            Packet key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_RESET">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_JUMP">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_PA1">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_PA2">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_PA3">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_WSCTRL">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_CUSEL">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_ATTN">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_FINISH">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_COPY">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_AUTO">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_ENLW">
            <summary>
            OEM specific
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_ATTN">
            <summary>
            Attn key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_CRSEL">
            <summary>
            CrSel key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_EXSEL">
            <summary>
            ExSel key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_EREOF">
            <summary>
            Erase EOF key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_PLAY">
            <summary>
            Play key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_ZOOM">
            <summary>
            Zoom key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_NONAME">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_PA1">
            <summary>
            PA1 key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OEM_CLEAR">
            <summary>
            Clear key
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_SEMICOLON">
            <summary>Semicolon key</summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_EQUAL">
            <summary>Equal key</summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_COMMA">
            <summary>Coma key</summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_HYPHEN">
            <summary>Hyphen key</summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_PERIOD">
            <summary>Period key</summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_SLASH">
            <summary>Slash key</summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_BACKQUOTE">
            <summary>Back quote key</summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_LBRACKET">
            <summary>Left backet key</summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_BACKSLASH">
            <summary>Back slash key</summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_RBRACKET">
            <summary>Righ bracket key</summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_APOSTROPHE">
            <summary>Apostrophe key</summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_OFF">
            <summary>Off key</summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_DBE_ALPHANUMERIC">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_DBE_KATAKANA">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_DBE_HIRAGANA">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_DBE_SBCSCHAR">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_DBE_DBCSCHAR">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_DBE_ROMAN">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_DBE_NOROMAN">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_DBE_ENTERWORDREGISTERMODE">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_DBE_ENTERIMECONFIGMODE">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_DBE_FLUSHSTRING">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_DBE_CODEINPUT">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_DBE_NOCODEINPUT">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_DBE_DETERMINESTRING">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.VK_DBE_ENTERDLGCONVERSIONMODE">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.LastSystemDefinedButton">
            <summary>
            Last in the standard MF buttons enumeration
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.AppDefined1">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.AppDefined2">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.AppDefined3">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.AppDefined4">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.AppDefined5">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.AppDefined6">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.AppDefined7">
            <summary>  </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Button.AppDefined8">
            <summary>  </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.ButtonEventArgs">
            <summary>
                The ButtonEventArgs class contains information about button states.
            </summary>
            <ExternalAPI/>
        </member>
        <member name="M:nanoFramework.UI.Input.ButtonEventArgs.#ctor(nanoFramework.UI.Input.ButtonDevice,nanoFramework.Presentation.PresentationSource,System.DateTime,nanoFramework.UI.Input.Button)">
            <summary>
                Constructs an instance of the ButtonEventArgs class.
            </summary>
            <param name="buttonDevice">
                The button device associated with this event.
            </param>
            <param name="inputSource">
                Presentation Source
            </param>
            <param name="timestamp">
                The time when the input occured. (machine time)
            </param>
            <param name="button">
                The button referenced by the event.
            </param>
        </member>
        <member name="F:nanoFramework.UI.Input.ButtonEventArgs.Button">
            <summary>
                The Button referenced by the event.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Input.ButtonEventArgs.ButtonState">
            <summary>
                The state of the button referenced by the event.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.ButtonEventArgs.InputSource">
            <summary>
            The source for this button
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Input.ButtonEventArgs.IsRepeat">
            <summary>
                Whether the button pressed is a repeated button or not.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.ButtonEventHandler">
            <summary>
                The delegate to use for handlers that receive ButtonEventArgs.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.Buttons">
            <summary>
                The Button class represents the button device to the
                members of a context.
            </summary>
            <remarks>
                The static members of this class simply delegate to the primary
                button device of the calling thread's input manager.
            </remarks>
        </member>
        <member name="F:nanoFramework.UI.Input.Buttons.PreviewButtonDownEvent">
            <summary>
                PreviewButtonDown
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Buttons.PreviewButtonUpEvent">
            <summary>
                PreviewButtonUp
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Buttons.ButtonDownEvent">
            <summary>
                ButtonDown
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Buttons.ButtonUpEvent">
            <summary>
                ButtonUp
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Buttons.GotFocusEvent">
            <summary>
                GotFocus
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.Buttons.LostFocusEvent">
            <summary>
                LostFocus
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Input.Buttons.FocusedElement">
            <summary>
                Returns the element that the button is focused on.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.Buttons.Focus(nanoFramework.Presentation.UIElement)">
            <summary>
                Focuses the button on a particular element.
            </summary>
            <param name="element">
                The element to focus the button on.
            </param>
        </member>
        <member name="M:nanoFramework.UI.Input.Buttons.IsButtonDown(nanoFramework.UI.Input.Button)">
            <summary>
                Returns whether or not the specified button is down.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.Buttons.IsButtonUp(nanoFramework.UI.Input.Button)">
            <summary>
                Returns whether or not the specified button is up.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.Buttons.IsButtonHeld(nanoFramework.UI.Input.Button)">
            <summary>
                Returns whether or not the specified button is held.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.Buttons.GetButtonState(nanoFramework.UI.Input.Button)">
            <summary>
                Returns the state of the specified button.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Input.Buttons.PrimaryDevice">
            <summary>
                The primary button device.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.ButtonState">
            <summary>
                The ButtonState enumeration describes the state that buttons
                can be in.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.ButtonState.None">
            <summary>
                No state (same as up).
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.ButtonState.Down">
            <summary>
               The button is down.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.ButtonState.Held">
            <summary>
               The button is held
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.TouchCaptureMode">
            <summary>
            Touch capture mode.s
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.TouchCaptureMode.None">
            <summary>
             None
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.TouchCaptureMode.Element">
            <summary>
             Element
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.TouchCaptureMode.SubTree">
            <summary>
             SubTree
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.FocusChangedEventArgs">
            <summary>
                The FocusChangedEventArgs class contains information about focus states
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.FocusChangedEventArgs.#ctor(nanoFramework.UI.Input.ButtonDevice,System.DateTime,nanoFramework.Presentation.UIElement,nanoFramework.Presentation.UIElement)">
            <summary>
                Constructs an instance of the FocusChangedEventArgs class.
            </summary>
            <param name="buttonDevice">
                The logical button device associated with this event.
            </param>
            <param name="timestamp">
                The time when the input occured.
            </param>
            <param name="oldFocus">
                The element that previously had focus.
            </param>
            <param name="newFocus">
                The element that now has focus.
            </param>
        </member>
        <member name="F:nanoFramework.UI.Input.FocusChangedEventArgs.OldFocus">
            <summary>
                The element that previously had focus.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.FocusChangedEventArgs.NewFocus">
            <summary>
                The element that now has focus.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.FocusChangedEventHandler">
            <summary>
                The delegate to use for handlers that receive FocusChangedEventArgs.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.GenericEventHandler">
            <summary>
            Generic Event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:nanoFramework.UI.Input.GenericEventArgs">
            <summary>
             Event Args
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.GenericEventArgs.#ctor(nanoFramework.UI.Input.InputDevice,nanoFramework.Runtime.Events.GenericEventEx)">
            <summary>
             Generic Event Args
            </summary>
            <param name="inputDevice"></param>
            <param name="genericEvent"></param>
        </member>
        <member name="F:nanoFramework.UI.Input.GenericEventArgs.InternalEvent">
            <summary>
            GenericEventEx
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.GenericEvents">
            <summary>
            Generic Events
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.GenericEvents.GenericStandardEvent">
            <summary>
            Generic Standard Events
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.GenericDevice">
            <summary>
                The GenericDevice class represents the Generic device to the
                members of a context.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Input.GenericDevice.Target">
            <summary>
            
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.GenericDevice.SetTarget(nanoFramework.Presentation.UIElement)">
            <summary>
            SetTarget
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:nanoFramework.UI.Input.GenericDevice.DeviceType">
            <summary>
             Input Manager
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.InputDevice">
            <summary>
                Provides the base class for all input devices.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.InputDevice.#ctor">
            <summary>
                Constructs an instance of the InputDevice class.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Input.InputDevice.Target">
            <summary>
                Returns the element that input from this device is sent to.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Input.InputDevice.DeviceType">
            <summary>
            Input Device Type
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.InputEventArgs">
            <summary>
                The InputEventArgs class represents a type of RoutedEventArgs that
                are relevant to all input events.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.InputEventArgs.#ctor(nanoFramework.UI.Input.InputDevice,System.DateTime)">
            <summary>
                Initializes a new instance of the InputEventArgs class.
            </summary>
            <param name="inputDevice">
                The input device to associate with this event.
            </param>
            <param name="timestamp">
                The time when the input occured.
            </param>
        </member>
        <member name="P:nanoFramework.UI.Input.InputEventArgs.Device">
            <summary>
                Read-only access to the input device that initiated this
                event.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.InputEventArgs.Timestamp">
            <summary>
                Read-only access to the input timestamp.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.InputEventHandler">
            <summary>
                The delegate to use for handlers that receive InputEventArgs.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.InputManager">
             <summary>
                 The InputManager class is responsible for coordinating all of the
                 input system in nanoFramework.
            
                 The input manager exists per Dispatcher
             </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.InputManager.PreviewInputReportEvent">
            <summary>
                A routed event indicating that an input report arrived.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.InputManager.InputReportEvent">
            <summary>
                A routed event indicating that an input report arrived.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Input.InputManager.CurrentInputManager">
            <summary>
                Return the input manager associated with the current context.
            </summary>
            <remarks>
                This class will not be available in internet zone.
            </remarks>
        </member>
        <member name="P:nanoFramework.UI.Input.InputManager.ButtonDevice">
            <summary>
            Button Device
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Input.InputManager.TouchDevice">
            <summary>
            Touch Device
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Input.InputManager.GenericDevice">
            <summary>
            GenericDevice
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.InputManager.RegisterInputProvider(System.Object)">
            <summary>
                Registers an input provider with the input manager.
            </summary>
            <param name="inputProvider">
                The input provider to register.
            </param>
        </member>
        <member name="P:nanoFramework.UI.Input.InputManager.InputProviders">
            <summary>
                Returns a collection of input providers registered with the input manager.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Input.InputManager.MostRecentInputDevice">
            <summary>
                The MostRecentInputDevice represents the last input device to
                report an "interesting" user action.  What exactly constitutes
                such an action is up to each device to implement.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.InputManager.ProcessInput(nanoFramework.UI.Input.InputEventArgs)">
            <summary>
                Synchronously processes the specified input.
            </summary>
            <remarks>
                The specified input is processed by all of the filters and
                monitors, and is finally dispatched to the appropriate
                element as an input event.
            </remarks>
            <returns>
                Whether or not any event generated as a consequence of this
                event was handled.
            </returns>
        </member>
        <member name="T:nanoFramework.UI.Input.InputManager.InputDeviceType">
            <summary>
            Input Device Type
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.InputManager.InputDeviceType.Button">
            <summary>
            Button
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.InputManager.InputDeviceType.Touch">
            <summary>
            Touch
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.InputManager.InputDeviceType.Generic">
            <summary>
            Generic
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.InputManager.InputDeviceType.Last">
            <summary>
            Last
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.InputManager.DeviceEvents">
            <summary>
             Device Events
            </summary>
        </member>
        <member name="E:nanoFramework.UI.Input.InputManager.DeviceEvents.PreProcessInput">
            <summary>Subscribe for all input before it is processed</summary>
        </member>
        <member name="E:nanoFramework.UI.Input.InputManager.DeviceEvents.PreNotifyInput">
            <summary>Subscribe for all input before it is notified</summary>
        </member>
        <member name="E:nanoFramework.UI.Input.InputManager.DeviceEvents.PostNotifyInput">
            <summary>Subscribe to all input after it is notified</summary>
        </member>
        <member name="E:nanoFramework.UI.Input.InputManager.DeviceEvents.PostProcessInput">
            <summary>subscribe to all input after it is processed</summary>
        </member>
        <member name="F:nanoFramework.UI.Input.InputManager.InputDeviceEvents">
            <summary>
            
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.InputProviderSite">
            <summary>
                The object which input providers use to report input to the input manager.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Input.InputProviderSite.InputManager">
            <summary>
                Returns the input manager that this site is attached to.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.InputProviderSite.Dispose">
            <summary>
                Unregisters this input provider.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.InputProviderSite.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:nanoFramework.UI.Input.InputProviderSite.IsDisposed">
            <summary>
            Returns true if we are disposed.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.InputProviderSite.ReportInput(nanoFramework.UI.Input.InputDevice,nanoFramework.UI.Input.InputReport)">
            <summary>
                Reports input to the input manager.
            </summary>
            <returns>
                Whether or not any event generated as a consequence of this
                event was handled.
            </returns>
        </member>
        <member name="T:nanoFramework.UI.Input.InputReport">
            <summary>
                The InputReport is an abstract base class for all input that is
                reported to the InputManager.
            </summary>
            <remarks>
                It is important to note that the InputReport class only contains
                blittable types.  This is required so that the report can be
                marshalled across application domains.
            </remarks>
        </member>
        <member name="M:nanoFramework.UI.Input.InputReport.#ctor(nanoFramework.Presentation.PresentationSource,System.DateTime)">
            <summary>
                Constructs an instance of the InputReport class.
            </summary>
            <param name="inputSource">
                The type of input that is being reported.
            </param>
            <param name="timestamp">
                The time when the input occured.
            </param>
        </member>
        <member name="F:nanoFramework.UI.Input.InputReport.InputSource">
            <summary>
                Read-only access to the type of input source that reported input.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.InputReport.Timestamp">
            <summary>
                Read-only access to the time when the input occured.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.InputReportArgs">
            <summary>
                report arguments
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.InputReportArgs.#ctor(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="dev"></param>
            <param name="report"></param>
        </member>
        <member name="F:nanoFramework.UI.Input.InputReportArgs.Device">
            <summary>
            
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.InputReportArgs.Report">
            <summary>
            
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.InputReportEventArgs">
            <summary>
                The InputReportEventArgs class contains information about an input
                report that is being processed.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.InputReportEventArgs.#ctor(nanoFramework.UI.Input.InputDevice,nanoFramework.UI.Input.InputReport)">
            <summary>
                Initializes a new instance of the InputReportEventArgs class.
            </summary>
            <param name="inputDevice">
                The input device to associate this input with.
            </param>
            <param name="report">
                The input report being processed.
            </param>
        </member>
        <member name="F:nanoFramework.UI.Input.InputReportEventArgs.Report">
            <summary>
                Read-only access to the input report being processed.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.InputReportEventHandler">
            <summary>
                The delegate to use for handlers that receive InputReportEventArgs
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.NotifyInputEventArgs">
            <summary>
                Provides information about an input event being processed by the
                input manager.
            </summary>
            <remarks>
                An instance of this class, or a derived class, is passed to the
                handlers of the following events:
                <list>
                </list>
            </remarks>
        </member>
        <member name="F:nanoFramework.UI.Input.NotifyInputEventArgs.StagingItem">
            <summary>
                The staging area input item being processed by the input
                manager.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.NotifyInputEventHandler">
            <summary>
                Delegate type for handles of events that use
                <see cref="T:nanoFramework.UI.Input.NotifyInputEventArgs"/>.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.PreProcessInputEventArgs">
            <summary>
                Allows the handler to cancel the processing of an input event.
            </summary>
            <remarks>
                An instance of this class is passed to the handlers of the
                following events:
                     cref="InputManager.PreProcessInput"
            </remarks>
        </member>
        <member name="M:nanoFramework.UI.Input.PreProcessInputEventArgs.Cancel">
            <summary>
                Cancels the processing of the input event.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Input.PreProcessInputEventArgs.Canceled">
            <summary>
                Whether or not the input event processing was canceled.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.PreProcessInputEventHandler">
            <summary>
                Delegate type for handles of events that use
                <see cref="T:nanoFramework.UI.Input.PreProcessInputEventArgs"/>.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.ProcessInputEventArgs">
            <summary>
                Provides access to the input manager's staging area.
            </summary>
            <remarks>
                An instance of this class, or a derived class, is passed to the
                handlers of the following events:
                  cref="InputManager.PreProcessInput"
                    cref="InputManager.PostProcessInput"
                   
            </remarks>
        </member>
        <member name="M:nanoFramework.UI.Input.ProcessInputEventArgs.PushInput(nanoFramework.UI.Input.InputEventArgs,nanoFramework.UI.Input.StagingAreaInputItem)">
            <summary>
                Pushes an input event onto the top of the staging area.
            </summary>
            <param name="input">
                The input event to place on the staging area.  This may not
                be null, and may not already exist in the staging area.
            </param>
            <param name="promote">
                An existing staging area item to promote the state from.
            </param>
            <returns>
                The staging area input item that wraps the specified input.
            </returns>
        </member>
        <member name="M:nanoFramework.UI.Input.ProcessInputEventArgs.PushInput(nanoFramework.UI.Input.StagingAreaInputItem)">
            <summary>
                Pushes an input event onto the top of the staging area.
            </summary>
            <param name="input">
                The input event to place on the staging area.  This may not
                be null, and may not already exist in the staging area.
            </param>
            <returns>
                The specified staging area input item.
            </returns>
        </member>
        <member name="M:nanoFramework.UI.Input.ProcessInputEventArgs.PopInput">
            <summary>
                Pops off the input event on the top of the staging area.
            </summary>
            <returns>
                The input event that was on the top of the staging area.
                This can be null, if the staging area was empty.
            </returns>
        </member>
        <member name="M:nanoFramework.UI.Input.ProcessInputEventArgs.PeekInput">
            <summary>
                Returns the input event on the top of the staging area.
            </summary>
            <returns>
                The input event that is on the top of the staging area.
                This can be null, if the staging area is empty.
            </returns>
        </member>
        <member name="T:nanoFramework.UI.Input.ProcessInputEventHandler">
            <summary>
                Delegate type for handles of events that use
                <see cref="T:nanoFramework.UI.Input.ProcessInputEventArgs"/>.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.RawButtonActions">
            <summary>
            Raw buttton actions.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.RawButtonActions.ButtonDown">
            <summary>
            Button Down
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.RawButtonActions.ButtonUp">
            <summary>
            Button Up
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.RawButtonActions.Activate">
            <summary>
            Activate
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.RawButtonActions.Deactivate">
            <summary>
            Deactivate
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.RawButtonInputReport">
            <summary>
                The RawButtonInputReport class encapsulates the raw input
                provided from a keyboard.
            </summary>
            <remarks>
                It is important to note that the InputReport class only contains
                blittable types.  This is required so that the report can be
                marshalled across application domains.
            </remarks>
        </member>
        <member name="M:nanoFramework.UI.Input.RawButtonInputReport.#ctor(nanoFramework.Presentation.PresentationSource,System.DateTime,nanoFramework.UI.Input.Button,nanoFramework.UI.Input.RawButtonActions)">
            <summary>
                Constructs an instance of the RawKeyboardInputReport class.
            </summary>
            <param name="inputSource"></param>
            <param name="timestamp"></param>
            <param name="button"></param>
            <param name="actions"></param>
        </member>
        <member name="F:nanoFramework.UI.Input.RawButtonInputReport.Button">
            <summary>
            Read-only access to the button reported.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.RawButtonInputReport.Actions">
            <summary>
            Read-only access to the action reported.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.RawGenericInputReport">
            <summary>
                The RawGenericInputReport class encapsulates the raw input
                provided from a keyboard.
            </summary>
            <remarks>
                It is important to note that the InputReport class only contains
                blittable types.  This is required so that the report can be
                marshalled across application domains.
            </remarks>
        </member>
        <member name="M:nanoFramework.UI.Input.RawGenericInputReport.#ctor(nanoFramework.Presentation.PresentationSource,nanoFramework.Runtime.Events.GenericEventEx)">
            <summary>
                Constructs an instance of the RawKeyboardInputReport class.
            </summary>
            <param name="inputSource">
                source of the input
            </param>
            <param name="genericEvent">
                Generic event
            </param>
        </member>
        <member name="M:nanoFramework.UI.Input.RawGenericInputReport.#ctor(nanoFramework.Presentation.PresentationSource,nanoFramework.Runtime.Events.GenericEventEx,nanoFramework.Presentation.UIElement)">
            <summary>
            
            </summary>
            <param name="inputSource"></param>
            <param name="genericEvent"></param>
            <param name="destTarget"></param>
        </member>
        <member name="F:nanoFramework.UI.Input.RawGenericInputReport.Target">
            <summary>
            
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.RawGenericInputReport.InternalEvent">
            <summary>
            
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.RawTouchActions">
            <summary>
            Raw touch actions.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.RawTouchActions.TouchDown">
            <summary>
            Touch Down.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.RawTouchActions.TouchUp">
            <summary>
            Touch Up.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.RawTouchActions.Activate">
            <summary>
            Activate.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.RawTouchActions.Deactivate">
            <summary>
             Deactivate
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.RawTouchActions.TouchMove">
            <summary>
            Touch Move.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.RawTouchInputReport">
            <summary>
                The RawTouchInputReport class encapsulates the raw input
                provided from a multitouch source.
            </summary>
            <remarks>
                It is important to note that the InputReport class only contains
                blittable types.  This is required so that the report can be
                marshalled across application domains.
            </remarks>
        </member>
        <member name="M:nanoFramework.UI.Input.RawTouchInputReport.#ctor(nanoFramework.Presentation.PresentationSource,System.DateTime,System.Byte,nanoFramework.UI.TouchInput[])">
            <summary>
                Constructs an instance of the RawKeyboardInputReport class.
            </summary>
            <param name="inputSource"></param>
            <param name="timestamp"></param>
            <param name="eventMessage"></param>
            <param name="touches"></param>
        </member>
        <member name="M:nanoFramework.UI.Input.RawTouchInputReport.#ctor(nanoFramework.Presentation.PresentationSource,System.DateTime,System.Byte,nanoFramework.UI.TouchInput[],nanoFramework.Presentation.UIElement)">
            <summary>
            
            </summary>
            <param name="inputSource"></param>
            <param name="timestamp"></param>
            <param name="eventMessage"></param>
            <param name="touches"></param>
            <param name="destTarget"></param>
        </member>
        <member name="F:nanoFramework.UI.Input.RawTouchInputReport.Target">
            <summary>
            
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.RawTouchInputReport.EventMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.RawTouchInputReport.Touches">
            <summary>
            
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.StagingAreaInputItem">
            <summary>
                This class encapsulates an input event while it is being
                processed by the input manager.
            </summary>
            <remarks>
                This class just provides the dictionary-based storage for
                all of the listeners of the various input manager events.
            </remarks>
        </member>
        <member name="F:nanoFramework.UI.Input.StagingAreaInputItem.Input">
            <summary>
                Returns the input event.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.StagingAreaInputItem.GetData(System.Object)">
            <summary>
                Provides storage for arbitrary data needed during the
                processing of this input event.
            </summary>
            <param name="key">
                An arbitrary key for the data.  This cannot be null.
            </param>
            <returns>
                The data previously set for this key, or null.
            </returns>
        </member>
        <member name="M:nanoFramework.UI.Input.StagingAreaInputItem.SetData(System.Object,System.Object)">
            <summary>
                Provides storage for arbitrary data needed during the
                processing of this input event.
            </summary>
            <param name="key">
                An arbitrary key for the data.  This cannot be null.
            </param>
            <param name="value">
                The data to set for this key.  This can be null.
            </param>
        </member>
        <member name="T:nanoFramework.UI.Input.TouchEventHandler">
            <summary>
            Touch event handler.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The touch event arguments.</param>
        </member>
        <member name="T:nanoFramework.UI.Input.TouchCapture">
            <summary>
            
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.TouchCapture.Capture(nanoFramework.Presentation.UIElement)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:nanoFramework.UI.Input.TouchCapture.Capture(nanoFramework.Presentation.UIElement,nanoFramework.UI.Input.TouchCaptureMode)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="P:nanoFramework.UI.Input.TouchCapture.Captured">
            <summary>
            
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.TouchEvents">
            <summary>
            
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.TouchEvents.TouchDownEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.TouchEvents.TouchMoveEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.TouchEvents.TouchUpEvent">
            <summary>
            
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Input.TouchEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Input.TouchEventArgs.Touches">
            <summary>
            
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.TouchEventArgs.#ctor(nanoFramework.UI.Input.InputDevice,System.DateTime,nanoFramework.UI.TouchInput[])">
            <summary>
            
            </summary>
            <param name="inputDevice"></param>
            <param name="timestamp"></param>
            <param name="touches"></param>
        </member>
        <member name="M:nanoFramework.UI.Input.TouchEventArgs.GetPosition(nanoFramework.Presentation.UIElement,System.Int32,System.Int32@,System.Int32@)">
            
        </member>
        <member name="T:nanoFramework.UI.Input.TouchDevice">
            <summary>
                The TouchDevice class represents the stylus/touch device to the
                members of a context.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Input.TouchDevice.Target">
            <summary>
            
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Input.TouchDevice.DeviceType">
            <summary>
            
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Input.TouchDevice.SetTarget(nanoFramework.Presentation.UIElement)">
            <summary>
            
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:nanoFramework.UI.Bitmap">
            <summary>
            Encapsulates a bitmap, which consists of the pixel data for a graphics image and its methods and attributes
            This class cannot be inherited.NET nanoFramework provides the Bitmap class on the native side.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Bitmap.MaxWidth">
            <summary>
            Gets the maximum width of the display device, in pixels.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Bitmap.MaxHeight">
            <summary>
            Gets the maximum height of the display device, in pixels.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Bitmap.CenterX">
            <summary>
            Gets the x-coordinate location of the center of the display device, in pixels.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Bitmap.CenterY">
            <summary>
            Gets the y-coordinate location of the center of the display device, in pixels.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Bitmap.OpacityOpaque">
            <summary>
            Specifies that the current bitmap is opaque.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Bitmap.OpacityTransparent">
            <summary>
            Specifies that the current bitmap is transparent.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Bitmap.BitmapImageType">
            <summary>
             Note that these values have to match the c_Type* consts in CLR_GFX_BitmapDescription 
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Bitmap.BitmapImageType.NanoCLRBitmap">
            <summary>
            A bitmap in a format specific to the nano Framework common language runtine (CLR).
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Bitmap.BitmapImageType.Gif">
            <summary>
            A bitmap in GIF format.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Bitmap.BitmapImageType.Jpeg">
            <summary>
            A bitmap in JPEG format.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Bitmap.BitmapImageType.Bmp">
            <summary>
            A bitmap in Windows BMP format.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.#ctor(System.Int32,System.Int32)">
            <summary>
            Encapsulates a bitmap, which consists of the pixel data for a graphics image and its methods and attributes.
            </summary>
            <param name="width">The width of the bitmap.</param>
            <param name="height">The height of the bitmap.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.#ctor(System.Byte[],nanoFramework.UI.Bitmap.BitmapImageType)">
            <summary>
            Encapsulates a bitmap, which consists of the pixel data for a graphics image and its methods and attributes.
            </summary>
            <param name="imageData">An array of pixel data for the specified image.</param>
            <param name="type">The bitmap type for the specified image.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.#ctor(System.Drawing.Size)">
            <summary>
            Encapsulates a bitmap, which consists of the pixel data for a graphics image and its methods and attributes.
            </summary>
            <param name="size">The <see cref="T:System.Drawing.Size"/> of the bitmap.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.Flush">
            <summary>
            Flushes the current bitmap to the display device.
            Bitmap will be written to the upper-left corner of the screen (full-screen, for full-screen bitmaps).
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.Flush(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Flushes a sub-rectangle of the current bitmap to the display device.
            </summary>
            <param name="x">The x-coordinate of the sub-rectangle's upper-left corner.</param>
            <param name="y">The y-coordinate of the sub-rectangle's upper-left corner.</param>
            <param name="width">The width of the sub-rectangle.</param>
            <param name="height">The height of the sub-rectangle.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.Flush(System.Drawing.Rectangle)">
            <summary>
            Flushes a sub-rectangle of the current bitmap to the display device.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.Flush(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Flushes a sub-rectangle of the current bitmap to the display device at a specified screen position.
            </summary>
            <param name="srcX">The x-coordinate of the sub-rectangle's upper-left corner.</param>
            <param name="srcY">The y-coordinate of the sub-rectangle's upper-left corner.</param>
            <param name="width">The width of the sub-rectangle.</param>
            <param name="height">The height of the sub-rectangle.</param>
            <param name="screenX">The x-coordinate of the screen to write to.</param>
            <param name="screenY">The y-coordinate of the screen to write to</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.Flush(System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
            Flushes a sub-rectangle of the current bitmap to the display device at a specified screen position.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.Clear">
            <summary>
            Clears the entire drawing surface.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawTextInRect(System.String@,System.Int32@,System.Int32@,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Drawing.Color,nanoFramework.UI.Font)">
            <summary>
            Draws text in a specified rectangle. Sets the clipping region (clipping rectangle) of a bitmap with a specified coordinate pair (x, y), width, and height.
            </summary>
            <param name="text">The text to be drawn. This parameter contains the remaining text, or an empty string, if the complete text string did not fit in the specified rectangle.</param>
            <param name="xRelStart">The x-coordinate, relative to the rectangle, at which text drawing is to begin.</param>
            <param name="yRelStart">The y-coordinate, relative to the rectangle, at which text drawing is to begin.</param>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="dtFlags">Flags that specify the format of the text.</param>
            <param name="color">The color to be used for the text.</param>
            <param name="font">The font to be used for the text.</param>
            <returns>Returns true if the text was completely drawn, false otherwise.</returns>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawTextInRect(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Drawing.Color,nanoFramework.UI.Font)">
            <summary>
            Draws text in a specified rectangle.
            Sets the clipping region (clipping rectangle) of a bitmap with a specified coordinate pair (x, y), width, and height.
            </summary>
            <param name="text">The text to be drawn. This parameter contains the remaining text, or an empty string, if the complete text string did not fit in the specified rectangle.</param>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="dtFlags">Flags that specify the format of the text.</param>
            <param name="color">The color to be used for the text.</param>
            <param name="font">The font to be used for the text.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawTextInRect(System.String,System.Drawing.Rectangle,System.UInt32,System.Drawing.Color,nanoFramework.UI.Font)">
            <summary>
            Draws text in a specified rectangle.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawChar(System.UInt16,System.Int32,System.Int32,System.Drawing.Color,nanoFramework.UI.Font)">
            <summary>
            Draws a single character to the screen.
            </summary>
            <param name="c">The character to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner to draw to.</param>
            <param name="y">The y-coordinate of the upper-left corner to draw to.</param>
            <param name="color">The color to be used for the character.</param>
            <param name="font">The font to be used for the character.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.SetClippingRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the clipping rectangle to restrict drawing to a certain area on the screen.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the clipping rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the clipping rectangle.</param>
            <param name="width">The width of the clipping rectangle.</param>
            <param name="height">The height of the clipping rectangle.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.SetClippingRectangle(System.Drawing.Rectangle)">
            <summary>
            Sets the clipping rectangle to restrict drawing to a certain area on the screen.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Bitmap.Width">
            <summary>
            Gets the width of the current bitmap.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Bitmap.Height">
            <summary>
            Gets the height of the current bitmap.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawEllipse(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Draws an ellipse filled with a specified color gradient.
            </summary>
            <param name="colorOutline">The outline color.</param>
            <param name="thicknessOutline">The thickness of the ellipse's outline, in pixels.</param>
            <param name="x">The x-coordinate location of the center of the ellipse.</param>
            <param name="y">The y-coordinate location of the center of the ellipse.</param>
            <param name="xRadius">The radius of the ellipse in the x-coordinate direction.</param>
            <param name="yRadius">The radius of the ellipse in the y-coordinate direction.</param>
            <param name="colorGradientStart">The starting color of the color gradient.</param>
            <param name="xGradientStart">The x-coordinate location of the starting point of the color gradient.</param>
            <param name="yGradientStart">The y-coordinate location of the starting point of the color gradient.</param>
            <param name="colorGradientEnd">The ending color of the color gradient.</param>
            <param name="xGradientEnd">The x-coordinate location of the ending point of the color gradient.</param>
            <param name="yGradientEnd">The y-coordinate location of the ending point of the color gradient.</param>
            <param name="opacity">The opacity of the ellipse.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawEllipse(System.Drawing.Color,System.Int32,System.Drawing.Point,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Point,System.Drawing.Color,System.Drawing.Point,System.UInt16)">
            <summary>
            Draws an ellipse filled with a specified color gradient.
            </summary>
            <param name="colorOutline">The outline color.</param>
            <param name="thicknessOutline">The thickness of the ellipse's outline, in pixels.</param>
            <param name="point">The location of the center of the ellipse.</param>
            <param name="xRadius">The radius of the ellipse in the x-coordinate direction.</param>
            <param name="yRadius">The radius of the ellipse in the y-coordinate direction.</param>
            <param name="colorGradientStart">The starting color of the color gradient.</param>
            <param name="gradientStartPoint">The location of the starting point of the color gradient.</param>
            <param name="colorGradientEnd">The ending color of the color gradient.</param>
            <param name="gradientEndPoint">The location of the ending point of the color gradient.</param>
            <param name="opacity">The opacity of the ellipse.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawEllipse(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw an ellipse
            </summary>
            <param name="colorOutline">The outline color.</param>
            <param name="x">The x-coordinate location of the center of the ellipse.</param>
            <param name="y">The y-coordinate location of the center of the ellipse.</param>
            <param name="xRadius">The radius of the ellipse in the x-coordinate direction.</param>
            <param name="yRadius">The radius of the ellipse in the y-coordinate direction.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawEllipse(System.Drawing.Color,System.Drawing.Point,System.Int32,System.Int32)">
            <summary>
            Draw an ellipse
            </summary>
            <param name="colorOutline">The outline color.</param>
            <param name="point">The location of the center of the ellipse.</param>
            <param name="xRadius">The radius of the ellipse in the x-coordinate direction.</param>
            <param name="yRadius">The radius of the ellipse in the y-coordinate direction.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawImage(System.Int32,System.Int32,nanoFramework.UI.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Draws a rectangular block of pixels with a specified degree of transparency.
            </summary>
            <param name="xDst">The x-coordinate location of the upper-left corner of the rectangular area on the display to which the specified pixels are to be copied.</param>
            <param name="yDst">The y-coordinate location of the upper-left corner of the rectangular area on the display to which the specified pixels are to be copied.</param>
            <param name="bitmap">The source bitmap.</param>
            <param name="xSrc">The x-coordinate location of the upper-left corner of the rectangular area in the source bitmap from which the specified pixels are to be copied.</param>
            <param name="ySrc">The x-coordinate location of the upper-left corner of the rectangular area in the source bitmap from which the specified pixels are to be copied.</param>
            <param name="width">The width of the rectangular block of pixels to be copied.</param>
            <param name="height">The height of the rectangular block of pixels to be copied.</param>
            <param name="opacity">The degree of opacity of the bitmap. A value of 0 (zero) makes the bitmap completely opaque (not transparent at all); a value of 255 makes the bitmap completely transparent.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawImage(System.Drawing.Point,nanoFramework.UI.Bitmap,System.Drawing.Rectangle,System.UInt16)">
            <summary>
            Draws a rectangular block of pixels with a specified degree of transparency.
            </summary>
            <param name="point">The location of the upper-left corner of the rectangular area on the display to which the specified pixels are to be copied.</param>
            <param name="bitmap">The source bitmap.</param>
            <param name="rectangle">The rectangle of pixels to be copied.</param>
            <param name="opacity">The degree of opacity of the bitmap. A value of 0 (zero) makes the bitmap completely opaque (not transparent at all); a value of 255 makes the bitmap completely transparent.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawImage(System.Drawing.Point,nanoFramework.UI.Bitmap,System.UInt16)">
            <summary>
            Draws a block of pixels with a specified degree of transparency.
            </summary>
            <param name="point">The location of the upper-left corner of the rectangular area on the display to which the specified pixels are to be copied.</param>
            <param name="bitmap">The source bitmap.</param>
            <param name="opacity">The degree of opacity of the bitmap. A value of 0 (zero) makes the bitmap completely opaque (not transparent at all); a value of 255 makes the bitmap completely transparent.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.RotateImage(System.Int32,System.Int32,System.Int32,nanoFramework.UI.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Rotates a rectangular block of pixels with a specified degree of transparency.
            </summary>
            <param name="angle">The degree of rotation.</param>
            <param name="xDst">The x-coordinate of the center of the destination bitmap.</param>
            <param name="yDst">The y-coordinate of the center of the destination bitmap.</param>
            <param name="bitmap">The source bitmap.</param>
            <param name="xSrc">The x-coordinate of the center of the source bitmap.</param>
            <param name="ySrc">The y-coordinate of the center of the source bitmap.</param>
            <param name="width">The width of the rectangular block of pixels to be copied.</param>
            <param name="height">The height of the rectangular block of pixels to be copied.</param>
            <param name="opacity">The degree of opacity of the bitmap. A value of 0 (zero) makes the bitmap completely opaque (not transparent at all); a value of 255 makes the bitmap completely transparent.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.RotateImage(System.Int32,System.Drawing.Point,nanoFramework.UI.Bitmap,System.Drawing.Rectangle,System.UInt16)">
            <summary>
            Rotates a rectangular block of pixels with a specified degree of transparency.
            </summary>
            <param name="angle">The degree of rotation.</param>
            <param name="point">The location of the center of the destination bitmap.</param>
            <param name="bitmap">The source bitmap.</param>
            <param name="rectangle">The rectangle of the source bitmap.</param>
            <param name="opacity">The degree of opacity of the bitmap. A value of 0 (zero) makes the bitmap completely opaque (not transparent at all); a value of 255 makes the bitmap completely transparent.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.RotateImage(System.Int32,System.Drawing.Point,nanoFramework.UI.Bitmap,System.UInt16)">
            <summary>
            Rotates a rectangular block of pixels with a specified degree of transparency.
            </summary>
            <param name="angle">The degree of rotation.</param>
            <param name="point">The location of the center of the destination bitmap.</param>
            <param name="bitmap">The source bitmap.</param>
            <param name="opacity">The degree of opacity of the bitmap. A value of 0 (zero) makes the bitmap completely opaque (not transparent at all); a value of 255 makes the bitmap completely transparent.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.MakeTransparent(System.Drawing.Color)">
            <summary>
            Sets a bitmap's transparent color.
            </summary>
            <param name="color">The color to be used as the bitmap's transparent color.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.StretchImage(System.Int32,System.Int32,nanoFramework.UI.Bitmap,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Draws a rectangular block of pixels on the display device, stretching or shrinking the rectangular area as necessary.
            </summary>
            <param name="xDst">The x-coordinate of the upper-left corner of the rectangular area to which the pixels are to be copied.</param>
            <param name="yDst">The y-coordinate of the upper-left corner of the rectangular area to which the pixels are to be copied.</param>
            <param name="sourceBitmap">The source bitmap.</param>
            <param name="width">The width of the rectangular area to which the pixels are to be copied.</param>
            <param name="height">The height of the rectangular area to which the pixels are to be copied.</param>
            <param name="opacity">The degree of opacity of the bitmap. A value of 0 (zero) makes the bitmap completely opaque (not transparent at all), and a value of 255 makes the bitmap completely transparent.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.StretchImage(System.Drawing.Point,nanoFramework.UI.Bitmap,System.Drawing.Size,System.UInt16)">
            <summary>
            Draws a rectangular block of pixels on the display device, stretching or shrinking the rectangular area as necessary.
            </summary>
            <param name="point">The location of the upper-left corner of the rectangular area to which the pixels are to be copied.</param>
            <param name="sourceBitmap">The source bitmap.</param>
            <param name="size">The size of the stretched image.</param>
            <param name="opacity">The degree of opacity of the bitmap. A value of 0 (zero) makes the bitmap completely opaque (not transparent at all), and a value of 255 makes the bitmap completely transparent.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawLine(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line on the display device.
            </summary>
            <param name="color">The color of the line.</param>
            <param name="thickness">The thickness of the line, in pixels. (Not currently available; all lines are one pixel thick.)</param>
            <param name="x0">The x-coordinate of the line's starting point.</param>
            <param name="y0">The y-coordinate of the line's starting point.</param>
            <param name="x1">The x-coordinate of the line's ending point.</param>
            <param name="y1">The y-coordinate of the line's ending point.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawLine(System.Drawing.Color,System.Int32,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Draws a line on the display device.
            </summary>
            <param name="color">The color of the line.</param>
            <param name="thickness">The thickness of the line, in pixels. (Not currently available; all lines are one pixel thick.)</param>
            <param name="start">The location of the line's starting point.</param>
            <param name="end">The location of the line's ending point.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Draws a rectangle outline on the display device.
            </summary>
            <param name="x">The x-coordinate of the rectangle's upper-left corner.</param>
            <param name="y">The y-coordinate of the rectangle's upper-left corner.</param>
            <param name="width">The width of the rectangle, in pixels.</param>
            <param name="height">The height of the rectangle, in pixels.</param>
            <param name="thickness">The thickness of the rectangle's outline, in pixels.</param>
            <param name="color">The color of the rectangle's outline.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawRectangle(System.Drawing.Rectangle,System.Int32,System.Drawing.Color)">
            <summary>
            Draws a rectangle outline on the display device.
            </summary>
            <param name="rectangle">The rectangle to draw.</param>
            <param name="thickness">The thickness of the rectangle's outline, in pixels.</param>
            <param name="color">The color of the rectangle's outline.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawRectangle(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Draws a rectangle on the display device.
            </summary>
            <param name="colorOutline">The color of the rectangle's outline.</param>
            <param name="thicknessOutline">The thickness of the rectangle's outline, in pixels.</param>
            <param name="x">The x-coordinate of the rectangle's upper-left corner.</param>
            <param name="y">The y-coordinate of the rectangle's upper-left corner.</param>
            <param name="width">The width of the rectangle, in pixels.</param>
            <param name="height">The height of the rectangle, in pixels.</param>
            <param name="xCornerRadius">The x-coordinate value of the corner radius used to produce rounded corners on the rectangle.</param>
            <param name="yCornerRadius">The y-coordinate value of the corner radius used to produce rounded corners on the rectangle.</param>
            <param name="colorGradientStart">The starting color for a color gradient.</param>
            <param name="xGradientStart">The x-coordinate location of the starting point of the color gradient.</param>
            <param name="yGradientStart">The y-coordinate location of the starting point of the color gradient.</param>
            <param name="colorGradientEnd">The ending color of the color gradient.</param>
            <param name="xGradientEnd">The x-coordinate location of the ending point of the color gradient.</param>
            <param name="yGradientEnd">The y-coordinate location of the ending point of the color gradient.</param>
            <param name="opacity">Specifies the opacity of the fill color. Set to 0x00 for completely transparent. Set to 0xFF for completely opaque.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawRectangle(System.Drawing.Color,System.Int32,System.Drawing.Rectangle,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Point,System.Drawing.Color,System.Drawing.Point,System.UInt16)">
            <summary>
            Draws a rectangle on the display device.
            </summary>
            <param name="colorOutline">The color of the rectangle's outline.</param>
            <param name="thicknessOutline">The thickness of the rectangle's outline, in pixels.</param>
            <param name="rectangle">The rectangle to draw.</param>
            <param name="xCornerRadius">The x-coordinate value of the corner radius used to produce rounded corners on the rectangle.</param>
            <param name="yCornerRadius">The y-coordinate value of the corner radius used to produce rounded corners on the rectangle.</param>
            <param name="colorGradientStart">The starting color for a color gradient.</param>
            <param name="gradientStartPoint">The location of the starting point of the color gradient.</param>
            <param name="colorGradientEnd">Specifies the ending color of the color gradient.</param>
            <param name="gradientEndPoint">The location of the ending point of the color gradient.</param>
            <param name="opacity">Specifies the opacity of the fill color. Set to 0x00 for completely transparent. Set to 0xFF for completely opaque.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawRoundRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Draw a rounded rectangle outline on the display device.
            </summary>
            <param name="x">The x-coordinate of the rectangle's upper-left corner.</param>
            <param name="y">The y-coordinate of the rectangle's upper-left corner.</param>
            <param name="width">The width of the rectangle, in pixels.</param>
            <param name="height">The height of the rectangle, in pixels.</param>
            <param name="thickness">The thickness of the rectangle's outline, in pixels.</param>
            <param name="xCornerRadius">The x-coordinate value of the corner radius used to produce rounded corners on the rectangle.</param>
            <param name="yCornerRadius">The y-coordinate value of the corner radius used to produce rounded corners on the rectangle.</param>
            <param name="color">The color of the rectangle's outline.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawRoundRectangle(System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Draw a rounded rectangle outline on the display device.
            </summary>
            <param name="rectangle">The rectangle to draw.</param>
            <param name="thickness">The thickness of the rectangle's outline, in pixels.</param>
            <param name="xCornerRadius">The x-coordinate value of the corner radius used to produce rounded corners on the rectangle.</param>
            <param name="yCornerRadius">The y-coordinate value of the corner radius used to produce rounded corners on the rectangle.</param>
            <param name="color">The color of the rectangle's outline.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawRoundRectangle(System.Drawing.Rectangle,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Draw a rounded rectangle outline on the display device.
            </summary>
            <param name="rectangle">The rectangle to draw.</param>
            <param name="thickness">The thickness of the rectangle's outline, in pixels.</param>
            <param name="cornerRadius">The corner radius used to produce rounded corners on the rectangle.</param>
            <param name="color">The color of the rectangle's outline.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.FillRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.UInt16)">
            <summary>
            Draw a filled rectangle on the display device.
            </summary>
            <param name="x">The x-coordinate of the rectangle's upper-left corner.</param>
            <param name="y">The y-coordinate of the rectangle's upper-left corner.</param>
            <param name="width">The width of the rectangle, in pixels.</param>
            <param name="height">The height of the rectangle, in pixels.</param>
            <param name="color">The color of the rectangle's outline.</param>
            <param name="opacity">Specifies the opacity of the fill color. Set to OpacityTransparent for completely transparent. Set to OpacityOpaque for completely opaque.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.FillRectangle(System.Drawing.Rectangle,System.Drawing.Color,System.UInt16)">
            <summary>
            Draw a filled rectangle on the display device.
            </summary>
            <param name="rectangle">The rectangle to draw.</param>
            <param name="color">The color of the rectangle's outline.</param>
            <param name="opacity">Specifies the opacity of the fill color. Set to OpacityTransparent for completely transparent. Set to OpacityOpaque for completely opaque.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.FillRoundRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.UInt16)">
            <summary>
            Draw a filled rounded rectangle on the display device.
            </summary>
            <param name="x">The x-coordinate of the rectangle's upper-left corner.</param>
            <param name="y">The y-coordinate of the rectangle's upper-left corner.</param>
            <param name="width">The width of the rectangle, in pixels.</param>
            <param name="height">The height of the rectangle, in pixels.</param>
            <param name="xCornerRadius">The x-coordinate value of the corner radius used to produce rounded corners on the rectangle.</param>
            <param name="yCornerRadius">The y-coordinate value of the corner radius used to produce rounded corners on the rectangle.</param>
            <param name="color">The color of the rectangle's outline.</param>
            <param name="opacity">Specifies the opacity of the fill color. Set to OpacityTransparent for completely transparent. Set to OpacityOpaque for completely opaque.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.FillRoundRectangle(System.Drawing.Rectangle,System.Int32,System.Int32,System.Drawing.Color,System.UInt16)">
            <summary>
            Draw a filled rounded rectangle on the display device.
            </summary>
            <param name="rectangle">The rectangle to draw.</param>
            <param name="xCornerRadius">The x-coordinate value of the corner radius used to produce rounded corners on the rectangle.</param>
            <param name="yCornerRadius">The y-coordinate value of the corner radius used to produce rounded corners on the rectangle.</param>
            <param name="color">The color of the rectangle's outline.</param>
            <param name="opacity">Specifies the opacity of the fill color. Set to OpacityTransparent for completely transparent. Set to OpacityOpaque for completely opaque.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.FillRoundRectangle(System.Drawing.Rectangle,System.Int32,System.Drawing.Color,System.UInt16)">
            <summary>
            Draw a filled rounded rectangle on the display device.
            </summary>
            <param name="rectangle">The rectangle to draw.</param>
            <param name="cornerRadius">The corner radius used to produce rounded corners on the rectangle.</param>
            <param name="color">The color of the rectangle's outline.</param>
            <param name="opacity">Specifies the opacity of the fill color. Set to OpacityTransparent for completely transparent. Set to OpacityOpaque for completely opaque.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.FillGradientRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Draws a filled rectangle with a color gradient on the display device.
            </summary>
            <param name="x">The x-coordinate of the rectangle's upper-left corner.</param>
            <param name="y">The y-coordinate of the rectangle's upper-left corner.</param>
            <param name="width">The width of the rectangle, in pixels.</param>
            <param name="height">The height of the rectangle, in pixels.</param>
            <param name="colorGradientStart">The starting color for the color gradient.</param>
            <param name="xGradientStart">The x-coordinate of the starting location of the color gradient.</param>
            <param name="yGradientStart">The y-coordinate of the starting location of the color gradient.</param>
            <param name="colorGradientEnd">The ending color of the color gradient.</param>
            <param name="xGradientEnd">The x-coordinate of the ending location of the color gradient.</param>
            <param name="yGradientEnd">The y-coordinate of the ending location of the color gradient.</param>
            <param name="opacity">The opacity of the fill color, ranging from completely transparent to completely opaque.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.FillGradientRectangle(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Point,System.Drawing.Color,System.Drawing.Point,System.UInt16)">
            <summary>
            Draws a filled rectangle with a color gradient on the display device.
            </summary>
            <param name="rectangle">The rectangle to draw.</param>
            <param name="colorGradientStart">The starting color for the color gradient.</param>
            <param name="gradientStartPoint">The starting location of the color gradient.</param>
            <param name="colorGradientEnd">The ending color of the color gradient.</param>
            <param name="gradientEndPoint">The ending location of the color gradient.</param>
            <param name="opacity">The opacity of the fill color, ranging from completely transparent to completely opaque.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawText(System.String,nanoFramework.UI.Font,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Draws text on the display device using a specified font and color.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="font">The font to be used for the text.</param>
            <param name="color">The color to be used for the text.</param>
            <param name="x">The x-coordinate of the location where the text drawing is to begin.</param>
            <param name="y">The y-coordinate of the location where the text drawing is to begin.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.DrawText(System.String,nanoFramework.UI.Font,System.Drawing.Color,System.Drawing.Point)">
            <summary>
            Draws text on the display device using a specified font and color.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="font">The font to be used for the text.</param>
            <param name="color">The color to be used for the text.</param>
            <param name="point">The location where the text drawing is to begin.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of a specified pixel on the display device.
            </summary>
            <param name="xPos">The x-coordinate of the pixel whose color you want to set.</param>
            <param name="yPos">The y-coordinate of the pixel whose color you want to set.</param>
            <param name="color">The color you want to set for the specified pixel.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.SetPixel(System.Drawing.Point,System.Drawing.Color)">
            <summary>
            Sets the color of a specified pixel on the display device.
            </summary>
            <param name="point">The location of the pixel whose color you want to set.</param>
            <param name="color">The color you want to set for the specified pixel.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.GetPixel(System.Int32,System.Int32)">
            <summary>
            Retrieves the pixel color at a specified location on the display device.
            </summary>
            <param name="xPos">The x-coordinate of the pixel whose color you want to get.</param>
            <param name="yPos">The y-coordinate of the pixel whose color you want to get.</param>
            <returns>The color of the specified pixel.</returns>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.GetPixel(System.Drawing.Point)">
            <summary>
            Retrieves the pixel color at a specified location on the display device.
            </summary>
            <param name="point">The location of the pixel whose color you want to get.</param>
            <returns>The color of the specified pixel.</returns>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.GetBitmap">
            <summary>
            Gets the bitmap of the display device.
            </summary>
            <returns>A byte array representing the bitmap of the display device.</returns>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.StretchImage(System.Int32,System.Int32,System.Int32,System.Int32,nanoFramework.UI.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Stretches a bitmap to fill a rectangular area on the display device.
            </summary>
            <param name="xDst">The x-coordinate of the upper-left corner of the rectangular area to which the pixels are to be copied.</param>
            <param name="yDst">The y-coordinate of the upper-left corner of the rectangular area to which the pixels are to be copied.</param>
            <param name="widthDst">The width of the rectangular area to which the pixels are to be copied.</param>
            <param name="heightDst">The height of the rectangular area to which the pixels are to be copied.</param>
            <param name="bitmap">The source bitmap to stretch onto the display device.</param>
            <param name="xSrc">The x-coordinate of the upper-left corner of the rectangular area from which the pixels are to be copied.</param>
            <param name="ySrc">The y-coordinate of the upper-left corner of the rectangular area from which the pixels are to be copied.</param>
            <param name="widthSrc">The width of the rectangular area from which the pixels are to be copied.</param>
            <param name="heightSrc">The height of the rectangular area from which the pixels are to be copied.</param>
            <param name="opacity">The bitmap's degree of opacity. A value of 0 makes the bitmap completely opaque; a value of 255 makes the bitmap completely transparent.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.TileImage(System.Int32,System.Int32,nanoFramework.UI.Bitmap,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Tiles an image on the display device.
            </summary>
            <param name="xDst">The x-coordinate of the upper-left corner of the rectangular area to which the pixels are to be copied.</param>
            <param name="yDst">The y-coordinate of the upper-left corner of the rectangular area to which the pixels are to be copied.</param>
            <param name="bitmap">The source bitmap to tile onto the display device.</param>
            <param name="width">The width of the tile.</param>
            <param name="height">The height of the tile.</param>
            <param name="opacity">The bitmap's degree of opacity. A value of 0 makes the bitmap completely opaque; a value of 255 makes the bitmap completely transparent.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.TileImage(System.Drawing.Point,nanoFramework.UI.Bitmap,System.Drawing.Size,System.UInt16)">
            <summary>
            Tiles an image on the display device.
            </summary>
            <param name="point">The location of the upper-left corner of the rectangular area to which the pixels are to be copied.</param>
            <param name="bitmap">The source bitmap to tile onto the display device.</param>
            <param name="size">The size of the tile.</param>
            <param name="opacity">The bitmap's degree of opacity. A value of 0 makes the bitmap completely opaque; a value of 255 makes the bitmap completely transparent.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.Scale9Image(System.Int32,System.Int32,System.Int32,System.Int32,nanoFramework.UI.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Scales a bitmap to fill a rectangular area on the display device using the Scale9Grid technique.
            </summary>
            <param name="xDst">The x-coordinate of the upper-left corner of the rectangular area to which the pixels are to be copied.</param>
            <param name="yDst">The y-coordinate of the upper-left corner of the rectangular area to which the pixels are to be copied.</param>
            <param name="widthDst">The width of the rectangular area to which the pixels are to be copied.</param>
            <param name="heightDst">The height of the rectangular area to which the pixels are to be copied.</param>
            <param name="bitmap">The source bitmap.</param>
            <param name="leftBorder">The number of pixels to be left unscaled at the left edge of the source bitmap.</param>
            <param name="topBorder">The number of pixels to be left unscaled at the top edge of the source bitmap.</param>
            <param name="rightBorder">The number of pixels to be left unscaled at the right edge of the source bitmap.</param>
            <param name="bottomBorder">The number of pixels to be left unscaled at the bottom edge of the source bitmap.</param>
            <param name="opacity">The bitmap's degree of opacity. A value of 0 (zero) makes the bitmap completely opaque (not transparent at all); a value of 255 makes the bitmap completely transparent.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.Scale9Image(System.Drawing.Rectangle,nanoFramework.UI.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Scales a bitmap to fill a rectangular area on the display device using the Scale9Grid technique.
            </summary>
            <param name="destination">The rectangular area to which the pixels are to be copied.</param>
            <param name="bitmap">The source bitmap.</param>
            <param name="leftBorder">The number of pixels to be left unscaled at the left edge of the source bitmap.</param>
            <param name="topBorder">The number of pixels to be left unscaled at the top edge of the source bitmap.</param>
            <param name="rightBorder">The number of pixels to be left unscaled at the right edge of the source bitmap.</param>
            <param name="bottomBorder">The number of pixels to be left unscaled at the bottom edge of the source bitmap.</param>
            <param name="opacity">The bitmap's degree of opacity. A value of 0 (zero) makes the bitmap completely opaque (not transparent at all); a value of 255 makes the bitmap completely transparent.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Bitmap and optionally releases the managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:nanoFramework.UI.Bitmap.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the Bitmap is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.DisplayControl">
            <summary>
            Display Control.  
            </summary>
        </member>
        <member name="P:nanoFramework.UI.DisplayControl.MaximumBufferSize">
            <summary>
            Gets the maximum buffer size for Bitmap in bytes.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.DisplayControl.Initialize(nanoFramework.UI.SpiConfiguration,nanoFramework.UI.ScreenConfiguration,System.UInt32)">
            <summary>
            Initializes the screen for use with Spi configuration.
            </summary>
            <param name="spi">Spi configuration.</param>
            <param name="screen">A screen configuration.</param>
            <param name="bufferSize">The desired buffer size allocation, 0 for default.</param>
            <remarks>You may have to configure the pins properly for the Spi configuration to be valid before initializing your screen.</remarks>
            <returns>The maximum buffer size possible allocation in bytes.</returns>
        </member>
        <member name="M:nanoFramework.UI.DisplayControl.Initialize(nanoFramework.UI.I2cConfiguration,nanoFramework.UI.ScreenConfiguration,System.UInt32)">
            <summary>
            Initializes the screen to use with I2C configuration.
            </summary>
            <param name="i2c"></param>
            <param name="screen">A screen configuration.</param>
            <param name="bufferSize">The desired buffer size allocation, 0 for default.</param>
            <remarks>You may have to configure the pins properly for the I2C configuration to be valid before initializing your screen.</remarks>
            <returns>The maximum buffer size possible allocation in bytes.</returns>
        </member>
        <member name="P:nanoFramework.UI.DisplayControl.FullScreen">
            <summary>
            Gets a Bitmap object that is the size of the current display.
            </summary>
            <remarks>Please make sure you check if you have enough memory with IsFullScreenBufferAvailable.
            If you don't have enough, the BitMap won't get initialized and will be null.</remarks>
        </member>
        <member name="P:nanoFramework.UI.DisplayControl.IsFullScreenBufferAvailable">
            <summary>
            Determines if a full size buffer is available based on the current screen configuration.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.DisplayControl.LongerSide">
            <summary>
            Gets the number of pixels for the longer side of the screen.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.DisplayControl.ShorterSide">
            <summary>
            Gets the number of pixels for the shorter side of the screen.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.DisplayControl.ScreenWidth">
            <summary>
            Gets the number of pixels for the width of the screen based on the orientation.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.DisplayControl.ScreenHeight">
            <summary>
            Gets the number of pixels for the height of the screen based on the orientation.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.DisplayControl.BitsPerPixel">
            <summary>
            Gets the number of bits per pixel used to display the screen. Currently 16 bits in RGB565 format.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.DisplayControl.Orientation">
            <summary>
            Gets the current display orientation, either landscape or portrait.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.DisplayControl.ChangeOrientation(nanoFramework.UI.DisplayOrientation)">
            <summary>
            Changes the orientation of the display and recreates the display canvas with new dimensions.
            </summary>
            <param name="orientation">The new orientation to set.</param>
            <returns>True if the orientation was supported and changed.</returns>
            <remarks>
            When the orientation is changed, the display canvas is disposed and recreated with the new dimensions when FullScreen property is next called.
            </remarks>
        </member>
        <member name="M:nanoFramework.UI.DisplayControl.WritePoint(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Writes a single point on the screen with the specified color.
            </summary>
            <param name="x">The x coordinate of the point to be written.</param>
            <param name="y">The y coordinate of the point to be written.</param>
            <param name="color">The 16-bit color value of the point to be written BGR656 format.</param>
        </member>
        <member name="M:nanoFramework.UI.DisplayControl.WritePoint(System.UInt16,System.UInt16,System.Drawing.Color)">
            <summary>
            Writes a single point on the screen with the specified color.
            </summary>
            <param name="x">The x coordinate of the point to be written.</param>
            <param name="y">The y coordinate of the point to be written.</param>
            <param name="color">The 16-bit color value of the point to be written BGR656 format.</param>
        </member>
        <member name="M:nanoFramework.UI.DisplayControl.Clear">
            <summary>
            Clears the screen.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.DisplayControl.Write(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16[])">
            <summary>
            Directly write in the screen at coordinate x,y a width,height buffer of 16 bits colors.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">The width of the area to display.</param>
            <param name="height">The height of the area to display.</param>
            <param name="colors">A BGR565, 16 bits color array.</param>
        </member>
        <member name="M:nanoFramework.UI.DisplayControl.Write(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.Drawing.Color[])">
            <summary>
            Directly write in the screen at coordinate x,y a width,height buffer of 16 bits colors.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">The width of the area to display.</param>
            <param name="height">The height of the area to display.</param>
            <param name="colors">A color array.</param>
            <remarks>The color array will be transformed in managed side to a ushort BGR565 array.</remarks>
        </member>
        <member name="M:nanoFramework.UI.DisplayControl.Write(System.String,System.UInt16,System.UInt16,System.UInt16,System.UInt16,nanoFramework.UI.Font,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Directly write on the screen a text at coordinate x,y a width,height with a background and foreground color.
            </summary>
            <param name="text">The text to write.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">The width of the area to display.</param>
            <param name="height">The height of the area to display.</param>
            <param name="font">The font to use.</param>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>    
        </member>
        <member name="T:nanoFramework.UI.DrawTextOptions">
            <summary>
            Draw Text options.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.DrawTextOptions.None">
            <summary>
            Specifies that there are no format rules.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.DrawTextOptions.WordWrap">
            <summary>
            Specifies whether a line of bitmap text automatically wraps words to the beginning of the next line when the line reaches its maximum width.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.DrawTextOptions.TruncateAtBottom">
            <summary>
            Specifies that if the bitmap text is larger than the space provided, the text is truncated at the bottom.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.DrawTextOptions.Ellipsis">
            <summary>
            Specifies that the bitmap text is trimmed to the nearest character, and an ellipsis is inserted at the end of each trimmed line.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.DrawTextOptions.IgnoreHeight">
            <summary>
            Specifies that if the bitmap text is larger than the space provided, the text is drawn in its full size, rather than being scaled down to fit the value in the Height property.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.DrawTextOptions.AlignmentLeft">
            <summary>
            Specifies that text is left-aligned as it flows around a bitmap.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.DrawTextOptions.AlignmentCenter">
            <summary>
            Specifies that text is center-aligned as it flows around a bitmap.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.DrawTextOptions.AlignmentRight">
            <summary>
            Specifies that text is right-aligned as it flows around a bitmap.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.DrawTextOptions.AlignmentMask">
            <summary>
            Specifies that you can use a mask to get or set text alignment around a bitmap.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.DrawTextOptions.TrimmingNone">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.DrawTextOptions.TrimmingWordEllipsis">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.DrawTextOptions.TrimmingCharacterEllipsis">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.DrawTextOptions.TrimmingMask">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.GraphicDriver">
            <summary>
            The generic graphic driver.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.GraphicDriver.Width">
            <summary>
            Gets or sets the width of the driver, it does override the Screen one if specified.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.GraphicDriver.Height">
            <summary>
            Gets or sets the height of the driver, it does override the Screen one if specified.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.GraphicDriver.BitsPerPixel">
            <summary>
            Gets or sets the bits per pixel of the driver, it does override the Screen one if specified.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.GraphicDriver.InitializationSequence">
            <summary>
            Gets or sets the initialization sequence of the driver.
            </summary>
            <remarks>See <see cref="T:nanoFramework.UI.GraphicDriverCommandType"/> for more information. Format is the following:
            (byte)GraphicDriverCommandType.Command, N, n0, n1..., nN-1,
            where N is the number of bytes to send and n0, n1, ..., nN-1 are the bytes to send.
            (byte)GraphicDriverCommandType.Sleep, T,
            where T is the time to sleep in 10 of milliseconds.
            </remarks>
        </member>
        <member name="P:nanoFramework.UI.GraphicDriver.MemoryWrite">
            <summary>
            Gets or sets the Memory Write command.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.GraphicDriver.SetColumnAddress">
            <summary>
            Gets or sets the Set Column Address command.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.GraphicDriver.SetRowAddress">
            <summary>
            Gets or sets the Set Row Address command.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.GraphicDriver.PowerModeNormal">
            <summary>
            Gets or sets the Power Mode Normal command.
            </summary>
            <remarks>See <see cref="T:nanoFramework.UI.GraphicDriverCommandType"/> for more information. Format is the following:
            (byte)GraphicDriverCommandType.Command, N, n0, n1..., nN-1,
            where N is the number of bytes to send and n0, n1, ..., nN-1 are the bytes to send.
            (byte)GraphicDriverCommandType.Sleep, T,
            where T is the time to sleep in 10 of milliseconds.
            </remarks>
        </member>
        <member name="P:nanoFramework.UI.GraphicDriver.PowerModeSleep">
            <summary>
            Gets or sets the Power Mode Sleep command.
            </summary>
            <remarks>See <see cref="T:nanoFramework.UI.GraphicDriverCommandType"/> for more information. Format is the following:
            (byte)GraphicDriverCommandType.Command, N, n0, n1..., nN-1,
            where N is the number of bytes to send and n0, n1, ..., nN-1 are the bytes to send.
            (byte)GraphicDriverCommandType.Sleep, T,
            where T is the time to sleep in 10 of milliseconds.
            </remarks>
        </member>
        <member name="P:nanoFramework.UI.GraphicDriver.OrientationPortrait">
            <summary>
            Gets or sets the Orientation Portrait command. If not specifyed, nothing will be applied.
            </summary>
            <remarks>See <see cref="T:nanoFramework.UI.GraphicDriverCommandType"/> for more information. Format is the following:
            (byte)GraphicDriverCommandType.Command, N, n0, n1..., nN-1,
            where N is the number of bytes to send and n0, n1, ..., nN-1 are the bytes to send.
            (byte)GraphicDriverCommandType.Sleep, T,
            where T is the time to sleep in 10 of milliseconds.
            </remarks>
        </member>
        <member name="P:nanoFramework.UI.GraphicDriver.OrientationPortrait180">
            <summary>
            Gets or sets the Orientation Portrait 180 command. If not specifyed, nothing will be applied.
            </summary>
            <remarks>See <see cref="T:nanoFramework.UI.GraphicDriverCommandType"/> for more information. Format is the following:
            (byte)GraphicDriverCommandType.Command, N, n0, n1..., nN-1,
            where N is the number of bytes to send and n0, n1, ..., nN-1 are the bytes to send.
            (byte)GraphicDriverCommandType.Sleep, T,
            where T is the time to sleep in 10 of milliseconds.
            </remarks>
        </member>
        <member name="P:nanoFramework.UI.GraphicDriver.OrientationLandscape">
            <summary>
            Gets or sets the Orientation Landscape command. If not specifyed, nothing will be applied.
            </summary>
            <remarks>See <see cref="T:nanoFramework.UI.GraphicDriverCommandType"/> for more information. Format is the following:
            (byte)GraphicDriverCommandType.Command, N, n0, n1..., nN-1,
            where N is the number of bytes to send and n0, n1, ..., nN-1 are the bytes to send.
            (byte)GraphicDriverCommandType.Sleep, T,
            where T is the time to sleep in 10 of milliseconds.
            </remarks>
        </member>
        <member name="P:nanoFramework.UI.GraphicDriver.OrientationLandscape180">
            <summary>
            Gets or sets the Orientation Landscape 180 command. If not specifyed, nothing will be applied.
            </summary>
            <remarks>See <see cref="T:nanoFramework.UI.GraphicDriverCommandType"/> for more information. Format is the following:
            (byte)GraphicDriverCommandType.Command, N, n0, n1..., nN-1,
            where N is the number of bytes to send and n0, n1, ..., nN-1 are the bytes to send.
            (byte)GraphicDriverCommandType.Sleep, T,
            where T is the time to sleep in 10 of milliseconds.
            </remarks>
        </member>
        <member name="P:nanoFramework.UI.GraphicDriver.Clear">
            <summary>
            Gets or sets the Clear command. If not specified, a default behavior will apply with a manual feel of the screen.
            </summary>
            <remarks>See <see cref="T:nanoFramework.UI.GraphicDriverCommandType"/> for more information. Format is the following:
            (byte)GraphicDriverCommandType.Command, N, n0, n1..., nN-1,
            where N is the number of bytes to send and n0, n1, ..., nN-1 are the bytes to send.
            (byte)GraphicDriverCommandType.Sleep, T,
            where T is the time to sleep in 10 of milliseconds.
            </remarks>
        </member>
        <member name="P:nanoFramework.UI.GraphicDriver.Brightness">
            <summary>
            Gets or sets the Brighness command.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.GraphicDriver.DefaultOrientation">
            <summary>
            Gets or sets the default orientation.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.GraphicDriver.SetWindowType">
            <summary>
            Gets or sets the Set Windowing type.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.GraphicDriverCommandType">
            <summary>
            Graphic driver command types.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.GraphicDriverCommandType.Sleep">
            <summary>
            Sleep command by chunk of 10 milliseconds.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.GraphicDriverCommandType.Command">
            <summary>
            Normal command followed by data.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.ScreenConfiguration">
            <summary>
            The screen configuration in the driver.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.ScreenConfiguration.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,nanoFramework.UI.GraphicDriver)">
            <summary>
            Creates a screen configuration.
            </summary>
            <param name="x">The x position the screen starts in the driver.</param>
            <param name="y">The y position the screen starts in the driver.</param>
            <param name="width">The width of the screen starts in the driver.</param>
            <param name="height">The height of the screen starts in the driver.</param>
            <param name="graphicDriver">The driver to use.</param>
        </member>
        <member name="P:nanoFramework.UI.ScreenConfiguration.X">
            <summary>
            Gets or sets the x position the screen starts in the driver.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.ScreenConfiguration.Y">
            <summary>
            Gets or sets the y position the screen starts in the driver.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.ScreenConfiguration.Width">
            <summary>
            Gets or sets the width of the screen starts in the driver.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.ScreenConfiguration.Height">
            <summary>
            Gets or sets the height of the screen starts in the driver.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.ScreenConfiguration.GraphicDriver">
            <summary>
            Gets or sets the graphic driver.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Font">
            <summary>
            Represents a font that can be used to render text on a display.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Font.DefaultKerning">
            <summary>
            Contains the default kerning for a particular font.
            The kerning controls the amount of space between consecutive characters in a particular font.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Font.CharWidth(System.Char)">
            <summary>
            Gets the width of the specified character, in pixels.
            </summary>
            <param name="c">The character to get the width of.</param>
            <returns>The width of the character in pixels.</returns>
        </member>
        <member name="P:nanoFramework.UI.Font.Height">
            <summary>
            Gets the height of the current font, in pixels.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Font.AverageWidth">
            <summary>
            Gets the average width of the characters in the current font, in pixels.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Font.MaxWidth">
            <summary>
            Gets the width of the widest character in the current font, in pixels.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Font.Ascent">
            <summary>
            Gets the ascent measurement for the current font, in pixels.
            A font's ascent is the vertical distance between the font baseline and the top of the font area.
            </summary>
            <returns>The ascent measurement for the current font, in pixels.</returns>
        </member>
        <member name="P:nanoFramework.UI.Font.Descent">
            <summary>
            Gets the descent measurement for the current font, in pixels.
            A font's descent is the vertical distance between the font baseline and the bottom of the font area.
            <returns>The descent measurement for the current font, in pixels.</returns>
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Font.InternalLeading">
            <summary>
            Gets the internal leading measurement for the current font, in pixels.
            <returns>The internal leading measurement for the current font, in pixels.</returns>
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Font.ExternalLeading">
            <summary>
            Gets the external leading measurement for the current font, in pixels.
            </summary>
            <returns>The external leading measurement for the current font, in pixels.</returns>
        </member>
        <member name="M:nanoFramework.UI.Font.ComputeExtent(System.String,System.Int32@,System.Int32@)">
            <summary>
            Computes the width, height, and kerning of a specified line of text.
            </summary>
            <param name="text">The text you want to measure.</param>
            <param name="width">The width of the specified text.</param>
            <param name="height">The height of the specified text.</param>
        </member>
        <member name="M:nanoFramework.UI.Font.ComputeExtent(System.String,System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Computes the width, height, and kerning of a specified line of text.
            </summary>
            <param name="text">The text you want to measure.</param>
            <param name="width">The width of the specified text.</param>
            <param name="height">The height of the specified text.</param>
            <param name="kerning">The spacing between consecutive characters.</param>
        </member>
        <member name="M:nanoFramework.UI.Font.ComputeTextInRect(System.String,System.Int32@,System.Int32@)">
            <summary>
            Computes the size of the rectangular area on the display device needed to render the specified text string.
            </summary>
            <param name="text">The text you want to render on the display device.</param>
            <param name="renderWidth">The width, in pixels, of the rectangular area needed to render the text.</param>
            <param name="renderHeight">The height, in pixels, of the rectangular area needed to render the text.</param>
        </member>
        <member name="M:nanoFramework.UI.Font.ComputeTextInRect(System.String,System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Computes the size of the rectangular area needed to render the specified text string on the display device, given the maximum width available for the text.
            </summary>
            <param name="text">The text to render on the display device.</param>
            <param name="renderWidth">The width, in pixels, of the rectangular area needed to render the text.</param>
            <param name="renderHeight">The height, in pixels, of the rectangular area needed to render the text.</param>
            <param name="availableWidth">The maximum width of text that will fit in the defined rectangular area.</param>
        </member>
        <member name="M:nanoFramework.UI.Font.ComputeTextInRect(System.String,System.Int32@,System.Int32@,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Computes the size of the rectangular area needed to render the specified text string on the display device, given the starting point and maximum size available for the text.
            </summary>
            <param name="text">The text to render on the display device.</param>
            <param name="renderWidth">The width, in pixels, of the rectangular area needed to render the text.</param>
            <param name="renderHeight">The height, in pixels, of the rectangular area needed to render the text.</param>
            <param name="xRelStart">The x-coordinate of the relative starting point for the text.</param>
            <param name="yRelStart">The y-coordinate of the relative starting point for the text.</param>
            <param name="availableWidth">The maximum width of text that will fit in the defined rectangular area.</param>
            <param name="availableHeight">The maximum height of text that will fit in the defined rectangular area.</param>
            <param name="dtFlags">Flags that specify various text characteristics, such as alignment.</param>
        </member>
        <member name="T:nanoFramework.UI.I2cConfiguration">
            <summary>
            I2C configuration.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.I2cConfiguration.#ctor(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Creates an I2C configuration.
            </summary>
            <param name="i2cBus">I2C bus.</param>
            <param name="address">Address.</param>
            <param name="fastMode">True for I2C fast mode.</param>
        </member>
        <member name="P:nanoFramework.UI.I2cConfiguration.I2cBus">
            <summary>
            Gets or sets the I2C bus.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.I2cConfiguration.Address">
            <summary>
            Gets or sets the address.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.I2cConfiguration.FastMode">
            <summary>
            Gets or sets whether the I2C fast mode is selected.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Ink">
            <summary>
            
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Ink.SetInkRegion(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,nanoFramework.UI.Bitmap)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="borderWidth"></param>
            <param name="color"></param>
            <param name="penWidth"></param>
            <param name="bitmap"></param>
        </member>
        <member name="M:nanoFramework.UI.Ink.ResetInkRegion">
            <summary>
            
            </summary>
        </member>
        <member name="T:nanoFramework.UI.SetWindowType">
            <summary>
            The window type to use when setting the window.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.SetWindowType.NoWindowing">
            <summary>
            No windowing is used.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.SetWindowType.X8bitsY1Bit">
            <summary>
            Address to set the window is using 8 bits for X and 1 bit for Y. Y is addressed using Y / 8.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.SetWindowType.X8bitsY8Bits">
            <summary>
            Address to set the window is using 8 bits for X and 8 bits for Y.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.SetWindowType.X16bitsY16Bit">
            <summary>
            Address to set the window is using 16 bits for X and 16 bits for Y.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.SpiConfiguration">
            <summary>
            The Spi configuration for the scressn
            </summary>
        </member>
        <member name="M:nanoFramework.UI.SpiConfiguration.#ctor(System.Byte,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a Spi configuration.
            </summary>
            <param name="spiBus">Spi bus.</param>
            <param name="chipselect">Chip select.</param>
            <param name="dataCommand">Data command.</param>
            <param name="reset">Reset.</param>
            <param name="backLight">Back light.</param>
        </member>
        <member name="P:nanoFramework.UI.SpiConfiguration.SpiBus">
            <summary>Z
            Gets or sets the SPI bus.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.SpiConfiguration.ChipSelect">
            <summary>
            Gets or sets the chip select GPIO.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.SpiConfiguration.DataCommand">
            <summary>
            Gets or sets the data command GPIO.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.SpiConfiguration.Reset">
            <summary>
            Gets or sets the reset GPIO.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.SpiConfiguration.BackLight">
            <summary>
            Gets or sets the back light GPIO.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.CollectionMethod">
            <summary>
            Specifies the collection method for ink and gesture strokes.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.CollectionMethod.Managed">
            <summary>
            Specifies the managed collection method where ink and gesture strokes are collected and managed by the application.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.CollectionMethod.Native">
            <summary>
            Specifies the native collection method where ink and gesture strokes are collected and managed by the operating system.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.CollectionMode">
            <summary>
            Specifies the collection mode for ink and gesture recognition.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.CollectionMode.InkOnly">
            <summary>
            Collects ink strokes only.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.CollectionMode.GestureOnly">
            <summary>
            Collects gesture input only.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.CollectionMode.InkAndGesture">
            <summary>
            Collects both ink strokes and gesture input.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Touch">
            <summary>
            Provides a static class for handling touch events.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Touch.Initialize(nanoFramework.Runtime.Events.IEventListener)">
            <summary>
            Initializes touch processing and adds a touch event processor and listener.
            </summary>
            <param name="touchEventListener">The listener for touch events.</param>
        </member>
        <member name="P:nanoFramework.UI.Touch.ActiveTouchPanel">
            <summary>
            Gets the active touch panel.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.TouchCollector">
            <summary>
            Class responsible for collecting touch data.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.TouchCollector.#ctor">
            <summary>
            Initializes a new instance of the TouchCollector class.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.TouchCollector.SetBuffer(System.UInt32)">
            <summary>
            Sets the buffer size for collecting touch data.
            </summary>
            <param name="bufferSize">The size of the buffer to be set.</param>
        </member>
        <member name="T:nanoFramework.UI.TouchCollectorConfiguration">
            <summary>
            Provides configuration settings for the TouchCollector.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.TouchCollectorConfiguration.CollectionMode">
            <summary>
            Gets or sets the collection mode for the TouchCollector.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.TouchCollectorConfiguration.CollectionMethod">
            <summary>
            Gets or sets the collection method for the TouchCollector.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.TouchCollectorConfiguration.SamplingFrequency">
            <summary>
            Gets or sets the sampling frequency per second.
            </summary>
            <remarks>Setting a frequency of 50 will result in 50 touch samples per second.</remarks>
        </member>
        <member name="M:nanoFramework.UI.TouchCollectorConfiguration.GetLastTouchPoint(System.Int32@,System.Int32@)">
            <summary>
            Gets the last touch point.
            </summary>
            <param name="x">The x-coordinate of the last touch point.</param>
            <param name="y">The y-coordinate of the last touch point.</param>
        </member>
        <member name="P:nanoFramework.UI.TouchCollectorConfiguration.TouchMoveFrequency">
            <summary>
            Gets or sets the touch move frequency.
            </summary>
            <remarks>The touch move frequency determines how often touch move events are generated.</remarks>
        </member>
        <member name="T:nanoFramework.UI.TouchCollectorConfiguration.TouchInput">
            <summary>
            Flags used to identify touch input properties.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchCollectorConfiguration.TouchInput.LastTouchPoint">
            <summary>
            The last known touch point on the screen.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchCollectorConfiguration.TouchInput.SamplingDistance">
            <summary>
            The distance between touch samples in microseconds.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchCollectorConfiguration.TouchInput.TouchMoveFrequency">
            <summary>
            The frequency of touch move events per second.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.TouchCollectorConfiguration.GetTouchInput(nanoFramework.UI.TouchCollectorConfiguration.TouchInput,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Retrieves touch input data for a specified flag.
            </summary>
            <param name="flag">The flag indicating the type of touch input data to retrieve.</param>
            <param name="param1">The first parameter of the touch input data.</param>
            <param name="param2">The second parameter of the touch input data.</param>
            <param name="param3">The third parameter of the touch input data.</param>
        </member>
        <member name="M:nanoFramework.UI.TouchCollectorConfiguration.SetTouchInput(nanoFramework.UI.TouchCollectorConfiguration.TouchInput,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets touch input data for a specified flag.
            </summary>
            <param name="flag">The flag indicating the type of touch input data to set.</param>
            <param name="param1">The first parameter of the touch input data.</param>
            <param name="param2">The second parameter of the touch input data.</param>
            <param name="param3">The third parameter of the touch input data.</param>
        </member>
        <member name="T:nanoFramework.UI.TouchEvent">
            <summary>
            Represents a touch event that encapsulates touch input data.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchEvent.Time">
            <summary>
            Gets or sets the time when the touch event occurred.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchEvent.Touches">
            <summary>
            Gets or sets an array of touch input data for the touch event.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.TouchEventProcessor">
            <summary>
            The TouchEventProcessor class implements the IEventProcessor interface to handle touch input events.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.TouchEventProcessor.ProcessEvent(System.UInt32,System.UInt32,System.DateTime)">
            <summary>
            Processes the touch input events.
            </summary>
            <param name="data1">The first touch event data.</param>
            <param name="data2">The second touch event data.</param>
            <param name="time">The time at which the touch input occurred.</param>
            <returns>A BaseEvent object that encapsulates the touch input event data.</returns>
        </member>
        <member name="T:nanoFramework.UI.Temporary">
            <summary>
            Temporary class to extend the EventCatory enum found in the nanoFramework.Runtime.Events.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Temporary.EventCategoryEx">
            <summary>
             Temporary enum with unique values within the EventCategory enum range found in nanoFramework.Runtime.Events
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Temporary.EventCategoryEx.Touch">
            <summary>
            Specifies a Touch Event
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Temporary.EventCategoryEx.Gesture">
            <summary>
            Specifies a Gesture Event
            </summary>
        </member>
        <member name="T:nanoFramework.UI.TouchGesture">
            <summary>An enum representing a touch gesture.</summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGesture.NoGesture">
            <summary>Represents an unknown or error gesture.</summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGesture.Begin">
            <summary> Identifies the beginning of a gesture sequence.</summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGesture.End">
            <summary>Identifies the end of a gesture sequence. Fired when last finger involved in a gesture is removed.</summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGesture.Right">
            <summary>Stylus gesture: Right.</summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGesture.UpRight">
            <summary>Stylus gesture: Up-Right.</summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGesture.Up">
            <summary>Stylus gesture: Up.</summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGesture.UpLeft">
            <summary>Stylus gesture: Up-Left.</summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGesture.Left">
            <summary>Stylus gesture: Left.</summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGesture.DownLeft">
            <summary>Stylus gesture: Down-Left.</summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGesture.Down">
            <summary>Stylus gesture: Down.</summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGesture.DownRight">
            <summary>Stylus gesture: Down-Right.</summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGesture.Tap">
            <summary>Stylus gesture: Tap.</summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGesture.DoubleTap">
            <summary>Stylus gesture: Double Tap.</summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGesture.Zoom">
            <summary>Multi-touch gesture: Zoom. Equivalent to your "Pinch" gesture.</summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGesture.Pan">
            <summary>Multi-touch gesture: Pan. Equivalent to your "Scroll" gesture.</summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGesture.Rotate">
            <summary>Multi-touch gesture: Rotate.</summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGesture.TwoFingerTap">
            <summary>Multi-touch gesture: Two Finger Tap.</summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGesture.Rollover">
            <summary>Multi-touch gesture: Rollover. Press and tap.</summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGesture.UserDefined">
            <summary>Represents a user-defined gesture.</summary>
        </member>
        <member name="T:nanoFramework.UI.TouchGestureEventHandler">
            <summary>
            Represents the method that handles the TouchGesture event.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">A TouchGestureEventArgs object that contains the event data.</param>
        </member>
        <member name="T:nanoFramework.UI.TouchGestureEventArgs">
            <summary>
            Represents the event data for a touch gesture event.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGestureEventArgs.Timestamp">
            <summary>
            Gets the time when the gesture occurred.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGestureEventArgs.Gesture">
            <summary>
            Gets or sets the type of gesture.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchGestureEventArgs.X">
            <summary>
            Gets or sets the X-coordinate of the gesture center or start location.
            </summary>
            <remarks> X and Y form the center location of the gesture for multi-touch or the starting location for single touch.</remarks>
        </member>
        <member name="F:nanoFramework.UI.TouchGestureEventArgs.Y">
            <summary>
            Gets or sets the Y-coordinate of the gesture center or start location.
            </summary>
            <remarks> X and Y form the center location of the gesture for multi-touch or the starting location for single touch.</remarks>
        </member>
        <member name="F:nanoFramework.UI.TouchGestureEventArgs.Arguments">
            <summary>
            Gets or sets the arguments associated with the gesture.
            </summary>
            <remarks>2 bytes for gesture-specific arguments.
            TouchGesture.Zoom: Arguments = distance between fingers
            TouchGesture.Rotate: Arguments = angle in degrees (0-360)
            </remarks>
        </member>
        <member name="P:nanoFramework.UI.TouchGestureEventArgs.Angle">
            <summary>
            Gets the angle of rotation for a Rotate gesture in degrees.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.TouchInput">
            <summary>
            Represents a single touch input on a touch-sensitive screen.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchInput.X">
            <summary>
            Gets or sets the x-coordinate of the touch input.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchInput.Y">
            <summary>
            Gets or sets the y-coordinate of the touch input.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchInput.SourceID">
            <summary>
            Gets or sets the source ID of the touch input.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchInput.Flags">
            <summary>
            Gets or sets the flags associated with the touch input.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchInput.ContactWidth">
            <summary>
            Gets or sets the width of the touch contact area.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchInput.ContactHeight">
            <summary>
            Gets or sets the height of the touch contact area.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.TouchInputFlags">
            <summary>
            Specifies the TouchInputFlags enumeration, which represents the flags for touch input.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchInputFlags.None">
            <summary>
            No flags are set.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchInputFlags.Primary">
            <summary>
            The Primary flag denotes the input that is passed to the single-touch Stylus events provided when no controls handle the Touch events.
            This flag should be set on the TouchInput structure that represents the first finger down as it moves around up to and including the point it is released.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchInputFlags.Pen">
            <summary>
            Specifies that the touch input is from a pen. Hardware support is optional, but providing it allows for potentially richer applications.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchInputFlags.Palm">
            <summary>
            Specifies that the touch input is from a palm. Hardware support is optional, but providing it allows for potentially richer applications.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.TouchMessages">
            <summary>
            Specifies the type of touch message that occurred.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchMessages.Down">
            <summary>
            A touch down message.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchMessages.Up">
            <summary>
            A touch up message.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchMessages.Move">
            <summary>
            A touch move message.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.TouchPanel">
            <summary>
            Class that represents a touch panel and provides calibration-related functions.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.TouchPanel.SetCalibration(System.Int32,System.Int16[],System.Int16[],System.Int16[],System.Int16[])">
            <summary>
            Sets the calibration parameters for the touch panel.
            </summary>
            <param name="cCalibrationPoints">The number of calibration points.</param>
            <param name="screenXBuffer">The X coordinates of the points on the screen.</param>
            <param name="screenYBuffer">The Y coordinates of the points on the screen.</param>
            <param name="uncalXBuffer">The uncalibrated X coordinates of the points.</param>
            <param name="uncalYBuffer">The uncalibrated Y coordinates of the points.</param>
        </member>
        <member name="M:nanoFramework.UI.TouchPanel.GetCalibrationPointCount(System.Int32@)">
            <summary>
            Gets the number of calibration points currently set for the touch panel.
            </summary>
            <param name="count">The number of calibration points.</param>
        </member>
        <member name="M:nanoFramework.UI.TouchPanel.StartCalibration">
            <summary>
            Starts the calibration process for the touch panel.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.TouchPanel.GetCalibrationPoint(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the coordinates of a calibration point.
            </summary>
            <param name="index">The index of the calibration point.</param>
            <param name="x">The X coordinate of the calibration point.</param>
            <param name="y">The Y coordinate of the calibration point.</param>
        </member>
        <member name="T:nanoFramework.UI.TouchScreen">
            <summary>
            Represents a touch screen that can listen for touch events.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.TouchScreen.ActiveRectangle">
            <summary>
            Represents a rectangular region of the touch screen that can receive touch events.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.TouchScreen.ActiveRectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:nanoFramework.UI.TouchScreen.ActiveRectangle"/> class with the specified location, size, and target object.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="target">The object that will receive touch events for this region.</param>
        </member>
        <member name="M:nanoFramework.UI.TouchScreen.ActiveRectangle.Contains(nanoFramework.UI.TouchInput)">
            <summary>
            Determines whether the specified touch input is within the bounds of this <see cref="T:nanoFramework.UI.TouchScreen.ActiveRectangle"/> object.
            </summary>
            <param name="input">The touch input to test.</param>
            <returns>true if the touch input is within the bounds of this <see cref="T:nanoFramework.UI.TouchScreen.ActiveRectangle"/> object; otherwise, false.</returns>
        </member>
        <member name="F:nanoFramework.UI.TouchScreen.ActiveRectangle.X">
            <summary>
            Gets the x-coordinate of the top-left corner of this active rectangle.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchScreen.ActiveRectangle.Y">
            <summary>
            Gets the y-coordinate of the top-left corner of this active rectangle.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchScreen.ActiveRectangle.Width">
            <summary>
            Gets the width of this active rectangle.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchScreen.ActiveRectangle.Height">
            <summary>
            Gets the height of this active rectangle.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchScreen.ActiveRectangle.Target">
            <summary>
            Gets the target object associated with this active rectangle.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.TouchScreen.#ctor(nanoFramework.UI.TouchScreen.ActiveRectangle[])">
            <summary>
            Initializes a new instance of the <see cref="T:nanoFramework.UI.TouchScreen"/> class with the specified active regions.
            </summary>
            <param name="activeRectangles">An array of active rectangles representing the regions of the screen that can be interacted with.</param>
        </member>
        <member name="E:nanoFramework.UI.TouchScreen.OnTouchDown">
            <summary>
            Event triggered when a touch down event occurs on the TouchScreen.
            </summary>
        </member>
        <member name="E:nanoFramework.UI.TouchScreen.OnTouchMove">
            <summary>
            Event triggered when a touch move event occurs on the TouchScreen.
            </summary>
        </member>
        <member name="E:nanoFramework.UI.TouchScreen.OnTouchUp">
            <summary>
            Event triggered when a touch up event occurs on the TouchScreen.
            </summary>
        </member>
        <member name="E:nanoFramework.UI.TouchScreen.OnGestureStarted">
            <summary>
            Event triggered when a gesture starts on the TouchScreen.
            </summary>
        </member>
        <member name="E:nanoFramework.UI.TouchScreen.OnGestureChanged">
            <summary>
            Event triggered when a gesture changes on the TouchScreen.
            </summary>
        </member>
        <member name="E:nanoFramework.UI.TouchScreen.OnGestureEnded">
            <summary>
            Event triggered when a gesture ends on the TouchScreen.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.TouchScreen.ActiveRegions">
            <summary>
            Gets or sets the ActiveRectangles that define the touchable regions on the TouchScreen.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.TouchScreenEventHandler">
            <summary>
            Represents the method that handles the TouchScreen event.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">A TouchScreenEventArgs object that contains the event data.</param>
        </member>
        <member name="T:nanoFramework.UI.TouchScreenEventArgs">
            <summary>
            Event arguments for touch screen events.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchScreenEventArgs.Touches">
            <summary>
            Gets or sets an array of TouchInput structures, containing information about each touch point.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchScreenEventArgs.TimeStamp">
            <summary>
            Gets or sets the time stamp for the event.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.TouchScreenEventArgs.Target">
            <summary>
            Gets or sets the target object for the event.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.TouchScreenEventArgs.#ctor(System.DateTime,nanoFramework.UI.TouchInput[],System.Object)">
            <summary>
            Initializes a new instance of the TouchScreenEventArgs class.
            </summary>
            <param name="timestamp">The time stamp for the event.</param>
            <param name="touches">An array of TouchInput structures containing information about each touch point.</param>
            <param name="target">The target object for the event.</param>
        </member>
        <member name="M:nanoFramework.UI.TouchScreenEventArgs.GetPosition(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the X and Y position of the touch point at the specified index.
            </summary>
            <param name="touchIndex">The index of the touch point to get the position for.</param>
            <param name="x">When this method returns, contains the X position of the touch point.</param>
            <param name="y">When this method returns, contains the Y position of the touch point.</param>
        </member>
        <member name="T:nanoFramework.UI.Application">
            <summary>
            Application base class
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Application.#ctor">
            <summary>
                Initializes a new instance of the Application class.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Application.Run">
            <summary>
                 Run is called to start an application.
            
                 Typically a developer will do some setting of properties/attaching to events after instantiating an application object,
                 and then call Run() to start the application.
            </summary>
            <remarks>
                 Once run has been called - an application's OnStartup override and Startup event is called
                 immediately afterwards.
            </remarks>
             <returns>ExitCode of the application</returns>
        </member>
        <member name="M:nanoFramework.UI.Application.Run(nanoFramework.Presentation.Window)">
            <summary>
                 Run is called to start an application.
            
                 Typically a developer will do some setting of properties/attaching to events after instantiating an application object,
                 and then call Run() to start the application.
            </summary>
            <remarks>
                 Once run has been called - an application's OnStartup override and Startup event is called
                 immediately afterwards.
            </remarks>
             <param name="window">Window that will be added to the Windows property and made the MainWindow of the Applcation.
             The passed Window must be created on the same thread as the Application object.  Furthermore, this Window is
             shown once the Application is run.</param>
        </member>
        <member name="M:nanoFramework.UI.Application.Shutdown">
             <summary>
                 Shutdown is called to programmatically shutdown an application.
            
                 Once shutdown() is called, the application gets called with the
                 OnShutdown method to raise the Shutdown event.
             </summary>
        </member>
        <member name="M:nanoFramework.UI.Application.InitializeForEventSource">
            <summary>
            Initializes the InputProvider for the EventSource.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Application.OnEvent(nanoFramework.Runtime.Events.BaseEvent)">
            <summary>
            Provides input processing for BaseEvent objects from the EventSource.
            </summary>
            <param name="ev">The event to process.</param>
            <returns>Returns true if the event was successfully processed, otherwise returns false.</returns>
        </member>
        <member name="P:nanoFramework.UI.Application.Current">
            <summary>
                The Current property enables the developer to always get to the application in
                AppDomain in which they are running.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Application.Windows">
            <summary>
                The Windows property exposes a WindowCollection object, from which a developer
                can iterate over all the windows that have been opened in the current application.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Application.MainWindow">
             <summary>
                 The MainWindow property indicates the primary window of the application.
             </summary>
             <remarks>
                 By default - MainWindow will be set to the first window opened in the application.
                 However the MainWindow may be set programmatically to indicate "this is my main window".
                 It is a recommended programming style to refer to MainWindow in code instead of Windows[0].
            
             </remarks>
        </member>
        <member name="P:nanoFramework.UI.Application.ShutdownMode">
             <summary>
                 The ShutdownMode property is called to set the shutdown specific mode of
                 the application. Setting this property controls the way in which an application
                 will shutdown.
                     The three values for the ShutdownMode enum are :
                             OnLastWindowClose
                             OnMainWindowClose
                             OnExplicitShutdown
            
                     OnLastWindowClose - this mode will shutdown the application when  the
                                         last window is closed, or an explicit call is made
                                         to Application.Shutdown(). This is the default mode.
            
                     OnMainWindowClose - this mode will shutdown the application when the main
                                         window has been closed, or Application.Shutdown() is
                                         called. Note that if the MainWindow property has not
                                         been set - this mode is equivalent to OnExplicitOnly.
            
                     OnExplicitShutdown- this mode will shutdown the application only when an
                                         explicit call to OnShutdown() has been made.
             </summary>
        </member>
        <member name="E:nanoFramework.UI.Application.Startup">
            <summary>
                The Startup event is fired when an application is starting.
                This event is raised by the OnStartup method.
            </summary>
        </member>
        <member name="E:nanoFramework.UI.Application.Exit">
            <summary>
            The Exit event is fired when an application is shutting down.
            This event is raised by the OnExit method.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Application.OnStartup(System.EventArgs)">
            <summary>
                OnStartup is called to raise the Startup event. The developer will typically override this method
                if they want to take action at startup time ( or they may choose to attach an event).
                This method will be called once when the application begins, once that application's Run() method
                has been called.
            </summary>
            <remarks>
                This method follows the .Net programming guideline of having a protected virtual method
                that raises an event, to provide a convenience for developers that subclass the event.
                If you override this method - you need to call Base.OnStartup(...) for the corresponding event
                to be raised.
            </remarks>
            <param name="e">The event args that will be passed to the Startup event</param>
        </member>
        <member name="M:nanoFramework.UI.Application.OnExit(System.EventArgs)">
            <summary>
                OnExit is called to raise the Exit event.
                The developer will typically override this method if they want to take
                action when the application exits  ( or they may choose to attach an event).
            </summary>
            <remarks>
                This method follows the .Net programming guideline of having a protected virtual method
                that raises an event, to provide a convenience for developers that subclass the event.
                If you override this method - you need to call Base.OnExit(...) for the
                corresponding event to be raised.
            </remarks>
            <param name="e">The event args that will be passed to the Exit event</param>
        </member>
        <member name="M:nanoFramework.UI.Application.DoShutdown">
            <summary>
            DO NOT USE - internal method
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Application.ShutdownCallback(System.Object)">
            <summary>
            This method gets called on dispatch of the Shutdown DispatcherOperationCallback
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Application.DefaultContextExceptionHandler(System.Object,System.Exception)">
            <summary>
            This DispatcherException event handler creates the default UI
            </summary>
        </member>
        <member name="T:nanoFramework.UI.CancelEventArgs">
            <summary>
            Cancel event arguments.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.CancelEventArgs.Cancel">
            <summary>
            Ture is cancelled.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.EventRoute">
             <summary>
                 Container for the route to be followed
                 by a RoutedEvent when raised
             </summary>
             <remarks>
                 EventRoute constitues <para/>
                 a non-null <see cref="F:nanoFramework.UI.EventRoute.RoutedEvent"/>
                 and <para/>
                 an ordered list of (target object, handler list)
                 pairs <para/>
                 <para/>
            
                 It facilitates adding new entries to this list
                 and also allows for the handlers in the list
                 to be invoked
             </remarks>
        </member>
        <member name="M:nanoFramework.UI.EventRoute.#ctor(nanoFramework.UI.RoutedEvent)">
            <summary>
                Constructor for <see cref="T:nanoFramework.UI.EventRoute"/> given
                the associated <see cref="F:nanoFramework.UI.EventRoute.RoutedEvent"/>
            </summary>
            <param name="routedEvent">
                Non-null <see cref="F:nanoFramework.UI.EventRoute.RoutedEvent"/> to be associated with
                this <see cref="T:nanoFramework.UI.EventRoute"/>
            </param>
        </member>
        <member name="M:nanoFramework.UI.EventRoute.Add(System.Object,nanoFramework.UI.RoutedEventHandler,System.Boolean)">
            <summary>
                Adds this handler for the
                specified target to the route
            </summary>
            <remarks>
                NOTE: It is not an error to add a
                handler for a particular target instance
                twice (handler will simply be called twice).
            </remarks>
            <param name="target">
                Target object whose handler is to be
                added to the route
            </param>
            <param name="handler">
                Handler to be added to the route
            </param>
            <param name="handledEventsToo">
                Flag indicating whether or not the listener wants to
                hear about events that have already been handled
            </param>
        </member>
        <member name="M:nanoFramework.UI.EventRoute.InvokeHandlers(System.Object,nanoFramework.UI.RoutedEventArgs)">
             <summary>
                 Invokes all the handlers that have been
                 added to the route
             </summary>
             <remarks>
                 NOTE: If the <see cref="T:nanoFramework.UI.RoutingStrategy"/>
                 of the associated <see cref="F:nanoFramework.UI.EventRoute.RoutedEvent"/>
                 is <see cref="F:nanoFramework.UI.RoutingStrategy.Bubble"/>
                 the last handlers added are the
                 last ones invoked <para/>
                 However if the <see cref="T:nanoFramework.UI.RoutingStrategy"/>
                 of the associated <see cref="F:nanoFramework.UI.EventRoute.RoutedEvent"/>
                 is <see cref="F:nanoFramework.UI.RoutingStrategy.Tunnel"/>,
                 the last handlers added are the
                 first ones invoked.
                 However the handlers for a particular object
                 are always invoked in the order they were added
                 regardless of whether its a tunnel or buble.
            
             </remarks>
             <param name="source">
                 <see cref="P:nanoFramework.UI.RoutedEventArgs.Source"/>
                 that raised the RoutedEvent
             </param>
             <param name="args">
                 <see cref="T:nanoFramework.UI.RoutedEventArgs"/> that carry
                 all the details specific to this RoutedEvent
             </param>
        </member>
        <member name="T:nanoFramework.UI.PropertyChangedEventArgs">
            <summary>
                Provides data for the various property changed events.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.PropertyChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
                Initializes a new instance of the PropertyChangedEventArgs class.
            </summary>
            <param name="property">
                The property whose value changed.
            </param>
            <param name="oldValue">
                The value of the property before the change.
            </param>
            <param name="newValue">
                The value of the property after the change.
            </param>
        </member>
        <member name="F:nanoFramework.UI.PropertyChangedEventArgs.Property">
            <summary>
                The property whose value changed.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.PropertyChangedEventArgs.OldValue">
            <summary>
                The value of the property before the change.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.PropertyChangedEventArgs.NewValue">
            <summary>
                The value of the property after the change.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.PropertyChangedEventHandler">
            <summary>
                Represents the method that will handle the event raised when a
                Property is changed
            </summary>
        </member>
        <member name="T:nanoFramework.UI.ReasonSessionEnding">
            <summary>
            Enum for the reason why a user session is ending.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.ReasonSessionEnding.Logoff">
            <summary>
            The user is logging off.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.ReasonSessionEnding.Shutdown">
            <summary>
            The system is shutting down.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.RoutedEvent">
             <summary>
                 RoutedEvent is a unique identifier for
                 any registered RoutedEvent
             </summary>
             <remarks>
                 RoutedEvent constitutes the
                cref="RoutedEvent.Name"
                cref="RoutedEvent.RoutingStrategy"
                cref="RoutedEvent.HandlerType"
                cref="RoutedEvent.OwnerType"
            
                 NOTE: None of the members can be null
             </remarks>
             <ExternalAPI/>
        </member>
        <member name="P:nanoFramework.UI.RoutedEvent.Name">
            <summary>
                Returns the Name of the RoutedEvent
            </summary>
            <remarks>
                RoutedEvent Name is unique within the
                OwnerType (super class types not considered
                when talking about uniqueness)
            </remarks>
            <ExternalAPI/>
        </member>
        <member name="P:nanoFramework.UI.RoutedEvent.RoutingStrategy">
            <summary>
                Returns the <see cref="P:nanoFramework.UI.RoutedEvent.RoutingStrategy"/>
                of the RoutedEvent
            </summary>
            <ExternalAPI/>
        </member>
        <member name="P:nanoFramework.UI.RoutedEvent.HandlerType">
            <summary>
                Returns Type of Handler for the RoutedEvent
            </summary>
            <remarks>
                HandlerType is a type of delegate
            </remarks>
            <ExternalAPI/>
        </member>
        <member name="M:nanoFramework.UI.RoutedEvent.ToString">
            <summary>
               String representation
            </summary>
        </member>
        <member name="M:nanoFramework.UI.RoutedEvent.#ctor(System.String,nanoFramework.UI.RoutingStrategy,System.Type)">
             <summary>
             Create a new routed event.
            
             You have to promise not to duplicate another event name in the system,
             or you will be sorry.
             </summary>
             <param name="name"></param>
             <param name="routingStrategy"></param>
             <param name="handlerType"></param>
        </member>
        <member name="P:nanoFramework.UI.RoutedEvent.GlobalIndex">
            <summary>
               Index for this event
            </summary>
        </member>
        <member name="T:nanoFramework.UI.RoutedEventArgs">
             <summary>
                 The container for all state associated
                 with a RoutedEvent
             </summary>
             <remarks>
                 <see cref="T:nanoFramework.UI.RoutedEventArgs"/>
                 constitutes the <para/>
                 <see cref="P:nanoFramework.UI.RoutedEventArgs.RoutedEvent"/>, <para/>
                 <see cref="P:nanoFramework.UI.RoutedEventArgs.Handled"/>, <para/>
                 <see cref="P:nanoFramework.UI.RoutedEventArgs.Source"/> and <para/>
                 <see cref="P:nanoFramework.UI.RoutedEventArgs.OriginalSource"/> <para/>
                 <para/>
            
                 Different <see cref="T:nanoFramework.UI.RoutedEventArgs"/>
                 can be used with a single <see cref="P:nanoFramework.UI.RoutedEventArgs.RoutedEvent"/> <para/>
                 <para/>
            
                 The <see cref="T:nanoFramework.UI.RoutedEventArgs"/> is responsible
                 for packaging the <see cref="P:nanoFramework.UI.RoutedEventArgs.RoutedEvent"/>,
                 providing extra event state info, and invoking the
                 handler associated with the RoutedEvent
             </remarks>
        </member>
        <member name="M:nanoFramework.UI.RoutedEventArgs.#ctor">
             <summary>
                 Constructor for <see cref="T:nanoFramework.UI.RoutedEventArgs"/>
             </summary>
             <remarks>
                 All members take default values <para/>
                 <para/>
            
                 <see cref="P:nanoFramework.UI.RoutedEventArgs.RoutedEvent"/>
                 defaults to null <para/>
                 <see cref="P:nanoFramework.UI.RoutedEventArgs.Handled"/> defaults to
                 false <para/>
                 <see cref="P:nanoFramework.UI.RoutedEventArgs.Source"/> defaults to null <para/>
                 <see cref="P:nanoFramework.UI.RoutedEventArgs.OriginalSource"/> also defaults to null
                 <para/>
             </remarks>
        </member>
        <member name="M:nanoFramework.UI.RoutedEventArgs.#ctor(nanoFramework.UI.RoutedEvent)">
            <summary>
                Constructor for <see cref="T:nanoFramework.UI.RoutedEventArgs"/>
            </summary>
            <param name="routedEvent">The new value that the RoutedEvent Property is being set to </param>
        </member>
        <member name="M:nanoFramework.UI.RoutedEventArgs.#ctor(nanoFramework.UI.RoutedEvent,System.Object)">
            <summary>
                Constructor for <see cref="T:nanoFramework.UI.RoutedEventArgs"/>
            </summary>
            <param name="source">The new value that the SourceProperty is being set to </param>
            <param name="routedEvent">The new value that the RoutedEvent Property is being set to </param>
        </member>
        <member name="P:nanoFramework.UI.RoutedEventArgs.RoutedEvent">
            <summary>
                Returns the <see cref="P:nanoFramework.UI.RoutedEventArgs.RoutedEvent"/> associated
                with this <see cref="T:nanoFramework.UI.RoutedEventArgs"/>
            </summary>
            <remarks>
                The <see cref="P:nanoFramework.UI.RoutedEventArgs.RoutedEvent"/> cannot be null
                at any time
            </remarks>
        </member>
        <member name="P:nanoFramework.UI.RoutedEventArgs.Handled">
            <summary>
                Returns a boolean flag indicating if or not this
                RoutedEvent has been handled this far in the route
            </summary>
            <remarks>
                Initially starts with a false value before routing
                has begun
            </remarks>
        </member>
        <member name="P:nanoFramework.UI.RoutedEventArgs.Source">
            <summary>
                Returns Source object that raised the RoutedEvent
            </summary>
        </member>
        <member name="P:nanoFramework.UI.RoutedEventArgs.OriginalSource">
            <summary>
                Returns OriginalSource object that raised the RoutedEvent
            </summary>
            <remarks>
                Always returns the OriginalSource object that raised the
                RoutedEvent unlike <see cref="P:nanoFramework.UI.RoutedEventArgs.Source"/>
                that may vary under specific scenarios <para/>
                This property acquires its value once before the event
                handlers are invoked and never changes then on
            </remarks>
        </member>
        <member name="M:nanoFramework.UI.RoutedEventArgs.OnSetSource(System.Object)">
            <summary>
                Invoked when the source of the event is set
            </summary>
            <remarks>
                Changing the source of an event can often
                require updating the data within the event.
                For this reason, the OnSource=  method is
                protected virtual and is meant to be
                overridden by sub-classes of
                <see cref="T:nanoFramework.UI.RoutedEventArgs"/> <para/>
                Also see <see cref="P:nanoFramework.UI.RoutedEventArgs.Source"/>
            </remarks>
            <param name="source">
                The new value that the SourceProperty is being set to
            </param>
        </member>
        <member name="M:nanoFramework.UI.RoutedEventArgs.InvokeHandler(nanoFramework.UI.RouteItem)">
            <summary>
                Invokes the handler associated with the specified RouteItem
            </summary>
            <param name="routeItem">
                RouteItem containing handler and target
            </param>
        </member>
        <member name="T:nanoFramework.UI.RoutedEventHandler">
            <summary>
                RoutedEventHandler Definition
            </summary>
            <ExternalAPI/>
        </member>
        <member name="T:nanoFramework.UI.RoutedEventHandlerInfo">
             <summary>
                 Container for handler instance and other
                 invocation preferences for this handler
                 instance
             </summary>
             <remarks>
                 RoutedEventHandlerInfo constitutes the
                 handler instance and flag that indicates if
                 or not this handler must be invoked for
                 already handled events <para/>
                 <para/>
            
                 This class needs to be public because it is
                 used by ContentElement in the Framework
                 to store Instance EventHandlers
             </remarks>
        </member>
        <member name="M:nanoFramework.UI.RoutedEventHandlerInfo.#ctor(nanoFramework.UI.RoutedEventHandler,System.Boolean)">
            <summary>
                Construtor for RoutedEventHandlerInfo
            </summary>
            <param name="handler">
                Non-null handler
            </param>
            <param name="handledEventsToo">
                Flag that indicates if or not the handler must
                be invoked for already handled events
            </param>
        </member>
        <member name="P:nanoFramework.UI.RoutedEventHandlerInfo.Handler">
            <summary>
                Returns associated handler instance
            </summary>
        </member>
        <member name="P:nanoFramework.UI.RoutedEventHandlerInfo.InvokeHandledEventsToo">
            <summary>
                Returns HandledEventsToo Flag
            </summary>
        </member>
        <member name="M:nanoFramework.UI.RoutedEventHandlerInfo.Equals(System.Object)">
            <summary>
                Is the given object equivalent to the current one
            </summary>
        </member>
        <member name="M:nanoFramework.UI.RoutedEventHandlerInfo.Equals(nanoFramework.UI.RoutedEventHandlerInfo)">
            <summary>
                Is the given RoutedEventHandlerInfo equals the current
            </summary>
        </member>
        <member name="M:nanoFramework.UI.RoutedEventHandlerInfo.GetHashCode">
            <summary>
                Serves as a hash function for a particular type, suitable for use in
                hashing algorithms and data structures like a hash table
            </summary>
        </member>
        <member name="M:nanoFramework.UI.RoutedEventHandlerInfo.op_Equality(nanoFramework.UI.RoutedEventHandlerInfo,nanoFramework.UI.RoutedEventHandlerInfo)">
            <summary>
                Equals operator overload
            </summary>
        </member>
        <member name="M:nanoFramework.UI.RoutedEventHandlerInfo.op_Inequality(nanoFramework.UI.RoutedEventHandlerInfo,nanoFramework.UI.RoutedEventHandlerInfo)">
            <summary>
                NotEquals operator overload
            </summary>
        </member>
        <member name="M:nanoFramework.UI.RouteItem.Equals(System.Object)">
            <summary>
                Is the given object equals the current
            </summary>
        </member>
        <member name="M:nanoFramework.UI.RouteItem.Equals(nanoFramework.UI.RouteItem)">
            <summary>
                Is the given RouteItem equals the current
            </summary>
        </member>
        <member name="M:nanoFramework.UI.RouteItem.GetHashCode">
            <summary>
                Serves as a hash function for a particular type, suitable for use in
                hashing algorithms and data structures like a hash table
            </summary>
        </member>
        <member name="M:nanoFramework.UI.RouteItem.op_Equality(nanoFramework.UI.RouteItem,nanoFramework.UI.RouteItem)">
            <summary>
                Equals operator overload
            </summary>
        </member>
        <member name="M:nanoFramework.UI.RouteItem.op_Inequality(nanoFramework.UI.RouteItem,nanoFramework.UI.RouteItem)">
            <summary>
                NotEquals operator overload
            </summary>
        </member>
        <member name="T:nanoFramework.UI.RoutingStrategy">
            <summary>
                Routing Strategy can be either of
                Tunnel or Bubble
            </summary>
            <ExternalAPI/>
        </member>
        <member name="F:nanoFramework.UI.RoutingStrategy.Tunnel">
            <summary>
                Tunnel
            </summary>
            <remarks>
                Route the event starting at the root of
                the visual tree and ending with the source
            </remarks>
        </member>
        <member name="F:nanoFramework.UI.RoutingStrategy.Bubble">
            <summary>
                Bubble
            </summary>
            <remarks>
                Route the event starting at the source
                and ending with the root of the visual tree
            </remarks>
        </member>
        <member name="F:nanoFramework.UI.RoutingStrategy.Direct">
            <summary>
                Direct
            </summary>
            <remarks>
                Raise the event at the source only.
            </remarks>
        </member>
        <member name="T:nanoFramework.UI.ShutdownMode">
            <summary>
            Enumerates the possible shutdown modes of a WPF application.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.ShutdownMode.OnLastWindowClose">
            <summary>
            The application shuts down when the last window is closed.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.ShutdownMode.OnMainWindowClose">
            <summary>
            The application shuts down when the main window is closed.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.ShutdownMode.OnExplicitShutdown">
            <summary>
            The application shuts down explicitly, by calling the Shutdown method.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.WindowCollection">
            <summary>
            WindowCollection can be used to interate over all the windows that have been
            opened in the current application.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.WindowCollection.#ctor">
            <summary>
            Default constructor for the WindowCollection class.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.WindowCollection.#ctor(System.Int32)">
            <summary>
            Internal constructor for the WindowCollection class that takes a count parameter.
            </summary>
            <param name="count">The count of windows to initialize the collection with.</param>
        </member>
        <member name="P:nanoFramework.UI.WindowCollection.Item(System.Int32)">
            <summary>
            Gets the Window object at the specified index.
            </summary>
            <param name="index">The zero-based index of the window to retrieve.</param>
            <returns>The Window object at the specified index.</returns>
        </member>
        <member name="M:nanoFramework.UI.WindowCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the WindowCollection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:nanoFramework.UI.WindowCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire WindowCollection to a compatible one-dimensional Array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from WindowCollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:nanoFramework.UI.WindowCollection.CopyTo(nanoFramework.Presentation.Window[],System.Int32)">
            <summary>
            Copies the elements of the WindowCollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from WindowCollection.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:nanoFramework.UI.WindowCollection.Count">
            <summary>
            Gets the number of windows contained in the WindowCollection.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.WindowCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the WindowCollection is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:nanoFramework.UI.WindowCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the WindowCollection.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.WindowCollection.Clone">
            <summary>
            Creates a new WindowCollection that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.WindowCollection.Remove(nanoFramework.Presentation.Window)">
            <summary>
            Removes the specified window from the WindowCollection.
            </summary>
            <param name="win">The window to remove.</param>
        </member>
        <member name="M:nanoFramework.UI.WindowCollection.Add(nanoFramework.Presentation.Window)">
            <summary>
            Adds the specified window to the WindowCollection.
            </summary>
            <param name="win">The window to add.</param>
            <returns>The index at which the window was added.</returns>
        </member>
        <member name="M:nanoFramework.UI.WindowCollection.HasItem(nanoFramework.Presentation.Window)">
            <summary>
            Determines whether the specified window is present in the WindowCollection.
            </summary>
            <param name="win">The window to check for.</param>
            <returns>True if the window is present, false otherwise.</returns>
        </member>
        <member name="T:nanoFramework.UI.Threading.DispatcherExceptionEventHandler">
            <summary>
              Delegate for processing exceptions that happen during Invoke or BeginInvoke.
              Return true if the exception was processed.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Threading.DispatcherOperationCallback">
            <summary>
              A convenient delegate to use for dispatcher operations.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Threading.Dispatcher">
            <summary>
                Provides UI services for a thread.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Threading.Dispatcher.CurrentDispatcher">
            <summary>
            Returns the Dispatcher for the current thread.
            </summary>
            <value>Dispatcher</value>
        </member>
        <member name="M:nanoFramework.UI.Threading.Dispatcher.FromThread(System.Threading.Thread)">
            <summary>
                Returns the Dispatcher for the specified thread.
            </summary>
            <remarks>
                If there is no dispatcher available for the specified thread,
                this method will return null.
            </remarks>
        </member>
        <member name="M:nanoFramework.UI.Threading.Dispatcher.CheckAccess">
            <summary>
                Checks that the calling thread has access to this object.
            </summary>
            <remarks>
                Only the dispatcher thread may access DispatcherObjects.
                <p/>
                This method is public so that any thread can probe to
                see if it has access to the DispatcherObject.
            </remarks>
            <returns>
                True if the calling thread has access to this object.
            </returns>
        </member>
        <member name="M:nanoFramework.UI.Threading.Dispatcher.VerifyAccess">
            <summary>
                Verifies that the calling thread has access to this object.
            </summary>
            <remarks>
                Only the dispatcher thread may access DispatcherObjects.
                <p/>
                This method is public so that derived classes can probe to
                see if the calling thread has access to itself.
            </remarks>
        </member>
        <member name="P:nanoFramework.UI.Threading.Dispatcher.Thread">
            <summary>
            Thread for the dispatcher.
            </summary>
            <value></value>
        </member>
        <member name="M:nanoFramework.UI.Threading.Dispatcher.InvokeShutdown">
            <summary>
                Begins the process of shutting down the dispatcher, synchronously.
                The process may complete asynchronously, since we may be
                nested in dispatcher frames.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Threading.Dispatcher.HasShutdownStarted">
            <summary>
                Whether or not the dispatcher is shutting down.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Threading.Dispatcher.HasShutdownFinished">
            <summary>
                Whether or not the dispatcher has been shut down.
            </summary>
        </member>
        <member name="E:nanoFramework.UI.Threading.Dispatcher.ShutdownStarted">
            <summary>
                Raised when the dispatcher starts shutting down.
            </summary>
        </member>
        <member name="E:nanoFramework.UI.Threading.Dispatcher.ShutdownFinished">
            <summary>
                Raised when the dispatcher is shut down.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Threading.Dispatcher.Run">
            <summary>
                Push the main execution frame.
            </summary>
            <remarks>
                This frame will continue until the dispatcher is shut down.
            </remarks>
        </member>
        <member name="M:nanoFramework.UI.Threading.Dispatcher.PushFrame(nanoFramework.UI.Threading.DispatcherFrame)">
            <summary>
                Push an execution frame.
            </summary>
            <param name="frame">
                The frame for the dispatcher to process.
            </param>
        </member>
        <member name="M:nanoFramework.UI.Threading.Dispatcher.BeginInvoke(nanoFramework.UI.Threading.DispatcherOperationCallback,System.Object)">
            <summary>
                Executes the specified delegate asynchronously with the specified
                arguments, on the thread that the Dispatcher was created on.
            </summary>
            <param name="method">
                A delegate to a method that takes parameters of the same number
                and type that are contained in the args parameter.
            </param>
            <param name="args">
                An object to pass as the argument to the given method.
                This can be null if no arguments are needed.
            </param>
            <returns>
                A DispatcherOperation object that represents the result of the
                BeginInvoke operation.  null if the operation could not be queued.
            </returns>
        </member>
        <member name="M:nanoFramework.UI.Threading.Dispatcher.Invoke(System.TimeSpan,nanoFramework.UI.Threading.DispatcherOperationCallback,System.Object)">
            <summary>
                Executes the specified delegate synchronously with the specified
                arguments, on the thread that the Dispatcher was created on.
            </summary>
            <param name="timeout">
                The maximum amount of time to wait for the operation to complete.
            </param>
            <param name="method">
                A delegate to a method that takes parameters of the same number
                and type that are contained in the args parameter.
            </param>
            <param name="args">
                An object to pass as the argument to the given method.
                This can be null if no arguments are needed.
            </param>
            <returns>
                The return value from the delegate being invoked, or null if
                the delegate has no return value or if the operation was aborted.
            </returns>
        </member>
        <member name="T:nanoFramework.UI.Threading.DispatcherFrame">
            <summary>
                Representation of Dispatcher frame.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Threading.DispatcherFrame.#ctor">
            <summary>
                Constructs a new instance of the DispatcherFrame class.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Threading.DispatcherFrame.#ctor(System.Boolean)">
            <summary>
                Constructs a new instance of the DispatcherFrame class.
            </summary>
            <param name="exitWhenRequested">
                Indicates whether or not this frame will exit when all frames
                are requested to exit.
                <p/>
                Dispatcher frames typically break down into two categories:
                1) Long running, general purpose frames, that exit only when
                   told to.  These frames should exit when requested.
                2) Short running, very specific frames that exit themselves
                   when an important criteria is met.  These frames may
                   consider not exiting when requested in favor of waiting
                   for their important criteria to be met.  These frames
                   should have a timeout associated with them.
            </param>
        </member>
        <member name="P:nanoFramework.UI.Threading.DispatcherFrame.Continue">
            <summary>
                Indicates that this dispatcher frame should exit.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Threading.DispatcherObject">
            <summary>
                A DispatcherObject is an object associated with a
                <see cref="F:nanoFramework.UI.Threading.DispatcherObject.Dispatcher"/>.  A DispatcherObject instance should
                only be access by the dispatcher's thread.
            </summary>
            <remarks>
                Subclasses of <see cref="T:nanoFramework.UI.Threading.DispatcherObject"/> should enforce thread
                safety by calling <see cref="M:nanoFramework.UI.Threading.DispatcherObject.VerifyAccess"/> on all their public
                methods to ensure the calling thread is the appropriate thread.
                <para/>
                DispatcherObject cannot be independently instantiated; that is,
                all constructors are protected.
            </remarks>
        </member>
        <member name="M:nanoFramework.UI.Threading.DispatcherObject.CheckAccess">
            <summary>
                Checks that the calling thread has access to this object.
            </summary>
            <remarks>
                Only the dispatcher thread may access DispatcherObjects.
                <p/>
                This method is public so that any thread can probe to
                see if it has access to the DispatcherObject.
            </remarks>
            <returns>
                True if the calling thread has access to this object.
            </returns>
        </member>
        <member name="M:nanoFramework.UI.Threading.DispatcherObject.VerifyAccess">
             <summary>
                 Verifies that the calling thread has access to this object.
             </summary>
             <remarks>
                 Only the dispatcher thread may access DispatcherObjects.
                 <p/>
                 This method is public so that derived classes can probe to
                 see if the calling thread has access to itself.
            
                 This is only verified in debug builds.
             </remarks>
        </member>
        <member name="M:nanoFramework.UI.Threading.DispatcherObject.#ctor">
            <summary>
                Instantiate this object associated with the current Dispatcher.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Threading.DispatcherObject.#ctor(System.Boolean)">
            <summary>
                Instantiate this object associated with the current Dispatcher.
            </summary>
            <param name="canBeUnbound">
                Whether or not the object can be detached from any Dispatcher.
            </param>
        </member>
        <member name="F:nanoFramework.UI.Threading.DispatcherObject.Dispatcher">
            <summary>
                The <see cref="F:nanoFramework.UI.Threading.DispatcherObject.Dispatcher"/> that this
                <see cref="T:nanoFramework.UI.Threading.DispatcherObject"/> is associated with.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Threading.DispatcherOperation">
            <summary>
                DispatcherOperation represents a delegate that has been
                posted to the Dispatcher queue.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Threading.DispatcherOperation.Dispatcher">
            <summary>
                Returns the Dispatcher that this operation was posted to.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Threading.DispatcherOperation.Status">
            <summary>
                The status of this operation.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Threading.DispatcherOperation.Wait">
            <summary>
                Waits for this operation to complete.
            </summary>
            <returns>
                The status of the operation.  To obtain the return value
                of the invoked delegate, use the the Result property.
            </returns>
        </member>
        <member name="M:nanoFramework.UI.Threading.DispatcherOperation.Wait(System.TimeSpan)">
            <summary>
                Waits for this operation to complete.
            </summary>
            <param name="timeout">
                The maximum amount of time to wait.
            </param>
            <returns>
                The status of the operation.  To obtain the return value
                of the invoked delegate, use the the Result property.
            </returns>
        </member>
        <member name="M:nanoFramework.UI.Threading.DispatcherOperation.Abort">
            <summary>
                Aborts this operation.
            </summary>
            <returns>
                False if the operation could not be aborted (because the
                operation was already in  progress)
            </returns>
        </member>
        <member name="P:nanoFramework.UI.Threading.DispatcherOperation.Result">
            <summary>
                Returns the result of the operation if it has completed.
            </summary>
        </member>
        <member name="E:nanoFramework.UI.Threading.DispatcherOperation.Aborted">
            <summary>
                An event that is raised when the operation is aborted.
            </summary>
        </member>
        <member name="E:nanoFramework.UI.Threading.DispatcherOperation.Completed">
            <summary>
                An event that is raised when the operation completes.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Threading.DispatcherOperationStatus">
             <summary>
                 An enumeration describing the status of a DispatcherOperation.
             </summary>
            
        </member>
        <member name="F:nanoFramework.UI.Threading.DispatcherOperationStatus.Pending">
            <summary>
                The operation is still pending.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Threading.DispatcherOperationStatus.Aborted">
            <summary>
                The operation has been aborted.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Threading.DispatcherOperationStatus.Completed">
            <summary>
                The operation has been completed.
            </summary>
        </member>
        <member name="F:nanoFramework.UI.Threading.DispatcherOperationStatus.Executing">
            <summary>
                The operation has started executing, but has not completed yet.
            </summary>
        </member>
        <member name="T:nanoFramework.UI.Threading.DispatcherTimer">
            <summary>
                A timer that is integrated into the Dispatcher queues, and will
                be processed after a given amount of time
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Threading.DispatcherTimer.#ctor">
            <summary>
                Creates a timer that uses the current thread's Dispatcher to
                process the timer event
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Threading.DispatcherTimer.#ctor(nanoFramework.UI.Threading.Dispatcher)">
            <summary>
                Creates a timer that uses the specified Dispatcher to
                process the timer event.
            </summary>
            <param name="dispatcher">
                The dispatcher to use to process the timer.
            </param>
        </member>
        <member name="P:nanoFramework.UI.Threading.DispatcherTimer.Dispatcher">
            <summary>
                Gets the dispatcher this timer is associated with.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Threading.DispatcherTimer.IsEnabled">
            <summary>
                Gets or sets whether the timer is running.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Threading.DispatcherTimer.Interval">
            <summary>
                Gets or sets the time between timer ticks.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Threading.DispatcherTimer.Start">
            <summary>
                Starts the timer.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Threading.DispatcherTimer.Stop">
            <summary>
                Stops the timer.
            </summary>
        </member>
        <member name="E:nanoFramework.UI.Threading.DispatcherTimer.Tick">
            <summary>
                Occurs when the specified timer interval has elapsed and the
                timer is enabled.
            </summary>
        </member>
        <member name="P:nanoFramework.UI.Threading.DispatcherTimer.Tag">
            <summary>
                Any data that the caller wants to pass along with the timer.
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Threading.DispatcherTimer.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Threading.DispatcherTimer.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:nanoFramework.UI.Threading.DispatcherTimer.Dispose(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.Border">
            <summary>
            Represents a WPF-like Border control that provides a border and background for its content.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Border.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:nanoFramework.Presentation.Controls.Border"/> class.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.Border.BorderBrush">
            <summary>
            Gets or sets the Brush used to draw the border of the <see cref="T:nanoFramework.Presentation.Controls.Border"/> control.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Border.GetBorderThickness(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the thickness of the border of the <see cref="T:nanoFramework.Presentation.Controls.Border"/> control.
            </summary>
            <param name="left">Receives the thickness of the left border.</param>
            <param name="top">Receives the thickness of the top border.</param>
            <param name="right">Receives the thickness of the right border.</param>
            <param name="bottom">Receives the thickness of the bottom border.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Border.SetBorderThickness(System.Int32)">
            <summary>
            Sets the thickness of the border of the <see cref="T:nanoFramework.Presentation.Controls.Border"/> control.
            </summary>
            <param name="length">The thickness of all four borders.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Border.SetBorderThickness(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the thickness of the border of the <see cref="T:nanoFramework.Presentation.Controls.Border"/> control.
            </summary>
            <param name="left">The thickness of the left border.</param>
            <param name="top">The thickness of the top border.</param>
            <param name="right">The thickness of the right border.</param>
            <param name="bottom">The thickness of the bottom border.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Border.ArrangeOverride(System.Int32,System.Int32)">
            <summary>
            Arranges the content of the <see cref="T:nanoFramework.Presentation.Controls.Border"/> control.
            </summary>
            <param name="arrangeWidth">The width of the layout slot for the control.</param>
            <param name="arrangeHeight">The height of the layout slot for the control.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Border.MeasureOverride(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="availableWidth"></param>
            <param name="availableHeight"></param>
            <param name="desiredWidth"></param>
            <param name="desiredHeight"></param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Border.OnRender(nanoFramework.Presentation.Media.DrawingContext)">
            <summary>
            Draws the content of the Border control.
            </summary>
            <param name="dc">The DrawingContext.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.Canvas">
            <summary>
            Represents a canvas panel that can be used to arrange child elements using absolute positioning.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Canvas.#ctor">
            <summary>
            Initializes a new instance of the Canvas class.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Canvas.GetBottom(nanoFramework.Presentation.UIElement)">
            <summary>
            Gets the value of the Bottom attached property of the specified element.
            </summary>
            <param name="e">The element to get the Bottom attached property for.</param>
            <returns>The value of the Bottom attached property of the specified element.</returns>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Canvas.SetBottom(nanoFramework.Presentation.UIElement,System.Int32)">
            <summary>
            Sets the value of the Bottom attached property of the specified element.
            </summary>
            <param name="e">The element to set the Bottom attached property for.</param>
            <param name="bottom">The value to set for the Bottom attached property.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Canvas.GetLeft(nanoFramework.Presentation.UIElement)">
            <summary>
            Gets the value of the Left attached property of the specified element.
            </summary>
            <param name="e">The element to get the Left attached property for.</param>
            <returns>The value of the Left attached property of the specified element.</returns>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Canvas.SetLeft(nanoFramework.Presentation.UIElement,System.Int32)">
            <summary>
            Sets the value of the Left attached property of the specified element.
            </summary>
            <param name="e">The element to set the Left attached property for.</param>
            <param name="left">The value to set for the Left attached property.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Canvas.GetRight(nanoFramework.Presentation.UIElement)">
            <summary>
            Gets the value of the Right attached property of the specified element.
            </summary>
            <param name="e">The element to get the Right attached property for.</param>
            <returns>The value of the Right attached property of the specified element.</returns>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Canvas.SetRight(nanoFramework.Presentation.UIElement,System.Int32)">
            <summary>
            Sets the value of the Right attached property of the specified element.
            </summary>
            <param name="e">The element to set the Right attached property for.</param>
            <param name="right">The value to set for the Right attached property.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Canvas.GetTop(nanoFramework.Presentation.UIElement)">
            <summary>
            Gets the value of the Top anchor for the specified UIElement.
            </summary>
            <param name="e">The UIElement to get the Top anchor value for.</param>
            <returns>The value of the Top anchor for the specified UIElement.</returns>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Canvas.SetTop(nanoFramework.Presentation.UIElement,System.Int32)">
            <summary>
            Sets the value of the Top anchor for the specified UIElement.
            </summary>
            <param name="e">The UIElement to set the Top anchor value for.</param>
            <param name="top">The value to set as the Top anchor for the specified UIElement.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Canvas.ArrangeOverride(System.Int32,System.Int32)">
            <summary>
            Arranges the child elements of the Canvas.
            </summary>
            <param name="arrangeWidth">The width of the area that the Canvas should use to arrange its children.</param>
            <param name="arrangeHeight">The height of the area that the Canvas should use to arrange its children.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Canvas.MeasureOverride(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Measures the size required for the child elements of the Canvas.
            </summary>
            <param name="availableWidth">The available width that the Canvas can give to its children.</param>
            <param name="availableHeight">The available height that the Canvas can give to its children.</param>
            <param name="desiredWidth">The desired width of the Canvas.</param>
            <param name="desiredHeight">The desired height of the Canvas.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.ContentControl">
            <summary>
            Represents a base class for a control that can contain a single child element.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ContentControl.Child">
            <summary>
            Gets or sets the child element of the ContentControl.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ContentControl.MeasureOverride(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Measures the size required for the child element of the ContentControl.
            </summary>
            <param name="availableWidth">The available width that a parent element can allocate to a child element.</param>
            <param name="availableHeight">The available height that a parent element can allocate to a child element.</param>
            <param name="desiredWidth">The width required for the child element based on the available space.</param>
            <param name="desiredHeight">The height required for the child element based on the available space.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.Control">
            <summary>
            Represents a base class for all WPF controls.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.Control.Background">
            <summary>
            Gets or sets the Brush that fills the background of the control.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.Control.Font">
            <summary>
            Gets or sets the Font of the control.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.Control.Foreground">
            <summary>
            Gets or sets the Brush that is used to paint the foreground of the control.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Control.OnRender(nanoFramework.Presentation.Media.DrawingContext)">
            <summary>
            Called when the control is redrawn.
            </summary>
            <param name="dc">The DrawingContext used to render the control.</param>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.Control._background">
            <summary>
            The Brush used to fill the background of the control.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.Control._foreground">
            <summary>
            The Brush used to paint the foreground of the control.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.Control._font">
            <summary>
            The Font used to render the control.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.Dock">
            <summary>
            Dock - Enum which describes how to position and stretch the child of a DockPanel.
            </summary> 
            <seealso cref="T:nanoFramework.Presentation.Controls.DockPanel" />
        </member>
        <member name="F:nanoFramework.Presentation.Controls.Dock.Left">
            <summary>
            Position this child at the left of the remaining space. 
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.Dock.Top">
            <summary> 
            Position this child at the top of the remaining space.
            </summary> 
        </member>
        <member name="F:nanoFramework.Presentation.Controls.Dock.Right">
            <summary> 
            Position this child at the right of the remaining space.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.Dock.Bottom">
            <summary>
            Position this child at the bottom of the remaining space. 
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.DockPanel">
            <summary> 
            DockPanel is used to size and position children inward from the edges of available space.
            
            A <see cref="T:nanoFramework.Presentation.Controls.Dock" /> enum (see <see cref="M:nanoFramework.Presentation.Controls.DockPanel.SetDock(nanoFramework.Presentation.UIElement,nanoFramework.Presentation.Controls.Dock)" /> and <see cref="M:nanoFramework.Presentation.Controls.DockPanel.GetDock(nanoFramework.Presentation.UIElement)" />) 
            determines on which size a child is placed.  Children are stacked in order from these edges until
            there is no more space; this happens when previous children have consumed all available space, or a child 
            with Dock set to Fill is encountered.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.DockPanel.ArrangeOverride(System.Int32,System.Int32)">
            <summary> 
            DockPanel computes a position and final size for each of its children based upon their <see cref="T:nanoFramework.Presentation.Controls.Dock" /> enum and sizing properties. 
            </summary> 
            <param name="arrangeWidth">Width that DockPanel will assume to position children.</param>
            <param name="arrangeHeight">Height that DockPanel will assume to position children.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.DockPanel.MeasureOverride(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Updates DesiredSize of the DockPanel.
            Called by parent UIElement.
            This is the first pass of layout.
            </summary>
            <param name="availableWidth">An "upper limit" that the return value should not exceed.</param>
            <param name="availableHeight">An "upper limit" that the return value should not exceed.</param>
            <param name="desiredWidth">The Panel's desired width.</param>
            <param name="desiredHeight">The Panel's desired height.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.DockPanel.GetDock(nanoFramework.Presentation.UIElement)">
            <summary> 
            Reads the pseudo-attached property Dock from the given element.
            </summary> 
            <param name="element">UIElement from which to read the pseudo-attached property.</param>
            <returns>The property's value.</returns>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.DockPanel.SetDock(nanoFramework.Presentation.UIElement,nanoFramework.Presentation.Controls.Dock)">
            <summary>
            Writes the pseudo-attached property Dock to the given element. 
            </summary>
            <param name="element">UIElement to which to write the attached property.</param> 
            <param name="dock">The property value to set.</param> 
        </member>
        <member name="P:nanoFramework.Presentation.Controls.DockPanel.LastChildFill">
            <summary>
            Gets or sets a value that indicates whether the last child element within a panel stretches to fill the remaining available space.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.DrawingAttributes">
            <summary>
            Represents the drawing attributes used for drawing on a canvas.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.DrawingAttributes.Color">
            <summary>
            Gets or sets the color used for drawing.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.Image">
            <summary>
            Summary description for Image.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Image.#ctor">
            <summary>
            Initializes a new instance of the Image class.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Image.#ctor(nanoFramework.UI.Bitmap)">
            <summary>
            Initializes a new instance of the Image class with a specified Bitmap.
            </summary>
            <param name="bmp">The Bitmap to display in the Image element.</param>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.Image.Bitmap">
            <summary>
            Gets or sets the Bitmap displayed in the Image element.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Image.MeasureOverride(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Measures the size of the Image element based on its Bitmap.
            </summary>
            <param name="availableWidth">The available width for the Image element to occupy.</param>
            <param name="availableHeight">The available height for the Image element to occupy.</param>
            <param name="desiredWidth">The desired width of the Image element based on its Bitmap.</param>
            <param name="desiredHeight">The desired height of the Image element based on its Bitmap.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Image.OnRender(nanoFramework.Presentation.Media.DrawingContext)">
            <summary>
            Renders the Bitmap of the Image element on the screen.
            </summary>
            <param name="dc">The DrawingContext to use for rendering.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.InkCanvas">
            <summary>
            Note: InkCanvas control is not movable at runtime. This requires complex logic, with
            no customer scenario at this moment.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.InkCanvas.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the InkCanvas class with the specified left, top, width, and height dimensions.
            </summary>
            <param name="left">The left coordinate of the InkCanvas.</param>
            <param name="top">The top coordinate of the InkCanvas.</param>
            <param name="width">The width of the InkCanvas.</param>
            <param name="height">The height of the InkCanvas.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.InkCanvas.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the InkCanvas class with the specified left, top, width, height, and border width dimensions.
            </summary>
            <param name="left">The left coordinate of the InkCanvas.</param>
            <param name="top">The top coordinate of the InkCanvas.</param>
            <param name="width">The width of the InkCanvas.</param>
            <param name="height">The height of the InkCanvas.</param>
            <param name="borderWidth">The width of the border around the InkCanvas.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.InkCanvas.Finalize">
            <summary>
            Finalizes an instance of the InkCanvas class.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.InkCanvas.OnTouchDown(nanoFramework.UI.Input.TouchEventArgs)">
            <summary>
            Handles the touch down event for the InkCanvas.
            </summary>
            <param name="e">The touch event arguments.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.InkCanvas.OnTouchUp(nanoFramework.UI.Input.TouchEventArgs)">
            <summary>
            Handles the touch up event for the InkCanvas.
            </summary>
            <param name="e">The touch event arguments.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.InkCanvas.OnRender(nanoFramework.Presentation.Media.DrawingContext)">
            <summary>
            Renders the InkCanvas control.
            </summary>
            <param name="dc">The drawing context to use for rendering.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.InkCanvas.Clear">
            <summary>
            Clears the InkCanvas.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.InkCanvas.Init(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the InkCanvas with the specified dimensions and border width.
            </summary>
            <param name="left">The left position of the InkCanvas on the screen.</param>
            <param name="top">The top position of the InkCanvas on the screen.</param>
            <param name="width">The width of the InkCanvas.</param>
            <param name="height">The height of the InkCanvas.</param>
            <param name="borderWidth">The width of the border around the InkCanvas.</param>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.InkCanvas.DefaultDrawingAttributes">
            <summary>
            Gets or sets the default drawing attributes for the InkCanvas.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.InkCanvas.MeasureOverride(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Measures the available space for the InkCanvas and sets the desired width and height accordingly.
            </summary>
            <param name="availableWidth">The available width for the InkCanvas.</param>
            <param name="availableHeight">The available height for the InkCanvas.</param>
            <param name="desiredWidth">The desired width for the InkCanvas.</param>
            <param name="desiredHeight">The desired height for the InkCanvas.</param>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.InkCanvas._defaultDrawingAttributes">
            <summary>
            The default drawing attributes for the InkCanvas.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.InkCanvas._bitmap">
            <summary>
            The Bitmap used for rendering the InkCanvas.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.ListBox">
            <summary>
            Represents a control that displays a list of items, where an item in the list can be selected.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ListBox.#ctor">
            <summary>
            Initializes a new instance of the ListBox class.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ListBox.Items">
            <summary>
            Gets the collection of items in the ListBox.
            </summary>
        </member>
        <member name="E:nanoFramework.Presentation.Controls.ListBox.SelectionChanged">
            <summary>
            Occurs when the selection of a ListBox item changes.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ListBox.SelectedIndex">
            <summary>
            Gets or sets the index of the currently selected item in a ListBox.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ListBox.SelectedItem">
            <summary>
            Gets or sets the currently selected item in a ListBox.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ListBox.ScrollIntoView(nanoFramework.Presentation.Controls.ListBoxItem)">
            <summary>
            Scrolls the ListBox to bring the specified ListBoxItem into view.
            </summary>
            <param name="item">The ListBoxItem to bring into view.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ListBox.OnButtonDown(nanoFramework.UI.Input.ButtonEventArgs)">
            <summary>
            Called when a button is pressed down. If the button is VK_DOWN and the currently selected item
            is not the last item, the selection is moved down to the next selectable item. If the button is
            VK_UP and the currently selected item is not the first item, the selection is moved up to the
            previous selectable item.
            </summary>
            <param name="e">The ButtonEventArgs containing information about the button press.</param>
        </member>
        <member name="E:nanoFramework.Presentation.Controls.ListBox.ScrollChanged">
            <summary>
            Occurs when the scroll position changes.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ListBox.HorizontalOffset">
            <summary>
            Gets or sets the horizontal scroll offset.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ListBox.VerticalOffset">
            <summary>
            Gets or sets the vertical scroll offset.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ListBox.ExtentHeight">
            <summary>
            Gets the extent height of the scrollable content.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ListBox.ExtentWidth">
            <summary>
            Gets the extent width of the scrollable content.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ListBox.ScrollingStyle">
            <summary>
            Gets or sets the scrolling behavior.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.ListBoxItem">
            <summary>
            Represents an item in a ListBox control.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ListBoxItem.IsSelected">
            <summary>
            Gets a value indicating whether this item is currently selected in the parent ListBox control.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ListBoxItem.IsSelectable">
            <summary>
            Gets or sets a value indicating whether this item can be selected by the user.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ListBoxItem.OnIsSelectedChanged(System.Boolean)">
            <summary>
            Called when the IsSelected property of this item changes.
            </summary>
            <param name="isSelected">The new value of the IsSelected property.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ListBoxItem.SetListBox(nanoFramework.Presentation.Controls.ListBox)">
            <summary>
            Sets the parent ListBox control of this item.
            </summary>
            <param name="listbox">The ListBox control to set as the parent.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.ListBoxItemCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ListBoxItemCollection.#ctor(nanoFramework.Presentation.Controls.ListBox,nanoFramework.Presentation.UIElementCollection)">
            <summary>
            Initializes a new instance of the ListBoxItemCollection class.
            </summary>
            <param name="listBox">The ListBox that owns the ListBoxItemCollection.</param>
            <param name="items">The UIElementCollection to use as the basis for the ListBoxItemCollection.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ListBoxItemCollection.Add(nanoFramework.Presentation.Controls.ListBoxItem)">
            <summary>
            Adds a ListBoxItem to the end of the ListBoxItemCollection.
            </summary>
            <param name="item">The ListBoxItem to add to the ListBoxItemCollection.</param>
            <returns>The zero-based index of the ListBoxItem that was added to the ListBoxItemCollection.</returns>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ListBoxItemCollection.Add(nanoFramework.Presentation.UIElement)">
            <summary>
            Adds a UIElement to the end of the ListBoxItemCollection.
            </summary>
            <param name="element">The UIElement to add to the ListBoxItemCollection.</param>
            <returns>The zero-based index of the ListBoxItem that was added to the ListBoxItemCollection.</returns>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ListBoxItemCollection.Clear">
            <summary>
            Removes all items from the ListBoxItemCollection.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ListBoxItemCollection.Contains(nanoFramework.Presentation.Controls.ListBoxItem)">
            <summary>
            Determines whether the ListBoxItemCollection contains a specific ListBoxItem.
            </summary>
            <param name="item">The ListBoxItem to locate in the ListBoxItemCollection.</param>
            <returns>true if the ListBoxItem is found in the ListBoxItemCollection; otherwise, false.</returns>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ListBoxItemCollection.Item(System.Int32)">
            <summary>
            Gets or sets the ListBoxItem at the specified index.
            </summary>
            <param name="index">The zero-based index of the ListBoxItem to get or set.</param>
            <returns>The ListBoxItem at the specified index.</returns>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ListBoxItemCollection.IndexOf(nanoFramework.Presentation.Controls.ListBoxItem)">
            <summary>
            Determines the index of a specific ListBoxItem in the ListBoxItemCollection.
            </summary>
            <param name="item">The ListBoxItem to locate in the ListBoxItemCollection.</param>
            <returns>The zero-based index of the ListBoxItem within the ListBoxItemCollection; otherwise, -1.</returns>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ListBoxItemCollection.Insert(System.Int32,nanoFramework.Presentation.Controls.ListBoxItem)">
            <summary>
            Inserts a ListBoxItem into the ListBoxItemCollection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the ListBoxItem should be inserted.</param>
            <param name="item">The ListBoxItem to insert into the ListBoxItemCollection.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ListBoxItemCollection.Remove(nanoFramework.Presentation.Controls.ListBoxItem)">
            <summary>
            Removes the specified ListBoxItem from the collection.
            </summary>
            <param name="item">The ListBoxItem to remove.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ListBoxItemCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the ListBoxItem at the specified index.
            </summary>
            <param name="index">The zero-based index of the ListBoxItem to remove.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ListBoxItemCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection.</param>
            <param name="index">The zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ListBoxItemCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ListBoxItemCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ListBoxItemCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ListBoxItemCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that iterates through the collection.</returns>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.Orientation">
            <summary>
            Enumerates the possible orientations for a user interface element.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.Orientation.Horizontal">
            <summary>
            Specifies a horizontal orientation for a user interface element.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.Orientation.Vertical">
            <summary>
            Specifies a vertical orientation for a user interface element.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.Panel">
            <summary>
            Represents a container that can contain multiple child elements.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.Panel.Children">
            <summary>
            Gets the collection of child elements of this panel.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Panel.MeasureOverride(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Measures the size required for this panel and its child elements.
            </summary>
            <param name="availableWidth">The available width for this panel.</param>
            <param name="availableHeight">The available height for this panel.</param>
            <param name="desiredWidth">The desired width of this panel.</param>
            <param name="desiredHeight">The desired height of this panel.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.ScrollChangedEventArgs">
            <summary>
            Provides data for the ScrollChanged event.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.ScrollChangedEventArgs.HorizontalChange">
            <summary>
            Gets the amount of horizontal change in the scroll position.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.ScrollChangedEventArgs.HorizontalOffset">
            <summary>
            Gets the horizontal offset of the scroll position.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.ScrollChangedEventArgs.VerticalChange">
            <summary>
            Gets the amount of vertical change in the scroll position.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.ScrollChangedEventArgs.VerticalOffset">
            <summary>
            Gets the vertical offset of the scroll position.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ScrollChangedEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ScrollChangedEventArgs class.
            </summary>
            <param name="offsetX">The horizontal offset of the scroll position.</param>
            <param name="offsetY">The vertical offset of the scroll position.</param>
            <param name="offsetChangeX">The amount of horizontal change in the scroll position.</param>
            <param name="offsetChangeY">The amount of vertical change in the scroll position.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.ScrollChangedEventHandler">
            <summary>
            Represents the method that will handle the ScrollChanged event of a ScrollViewer.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A ScrollChangedEventArgs object containing the event data.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.ScrollingStyle">
            <summary>
            Specifies the scrolling style for a ScrollViewer control.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.ScrollingStyle.First">
            <summary>
            Scrolls content by a line at a time.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.ScrollingStyle.LineByLine">
            <summary>
            Scrolls content by a line at a time.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.ScrollingStyle.PageByPage">
            <summary>
            Scrolls content by a page at a time.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.ScrollingStyle.Last">
            <summary>
            Scrolls content by a page at a time.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.ScrollViewer">
            <summary>
            Represents a control that provides a scrollable view of content in a container.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ScrollViewer.#ctor">
            <summary>
            Initializes a new instance of the ScrollViewer class.
            </summary>
        </member>
        <member name="E:nanoFramework.Presentation.Controls.ScrollViewer.ScrollChanged">
            <summary>
            Occurs when the ScrollViewer's scrolling state has changed.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ScrollViewer.HorizontalOffset">
            <summary>
            Gets or sets the horizontal offset of the ScrollViewer's content.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ScrollViewer.VerticalOffset">
            <summary>
            Gets or sets the vertical offset of the ScrollViewer's content.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ScrollViewer.ExtentHeight">
            <summary>
            Gets the extent height of the ScrollViewer's content.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ScrollViewer.ExtentWidth">
            <summary>
            Gets the extent width of the ScrollViewer's content.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ScrollViewer.LineWidth">
            <summary>
            Gets or sets the width of each line in the ScrollViewer's content.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ScrollViewer.LineHeight">
            <summary>
            Gets or sets the height of each line in the ScrollViewer's content.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.ScrollViewer.ScrollingStyle">
            <summary>
            Gets or sets the style used for scrolling in the ScrollViewer.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ScrollViewer.MeasureOverride(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Measures the size required for the ScrollViewer and its content.
            </summary>
            <param name="availableWidth">The available width for the ScrollViewer.</param>
            <param name="availableHeight">The available height for the ScrollViewer.</param>
            <param name="desiredWidth">The desired width of the ScrollViewer.</param>
            <param name="desiredHeight">The desired height of the ScrollViewer.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ScrollViewer.ArrangeOverride(System.Int32,System.Int32)">
            <summary>
            Arranges the ScrollViewer and its content.
            </summary>
            <param name="arrangeWidth">The arranged width of the ScrollViewer.</param>
            <param name="arrangeHeight">The arranged height of the ScrollViewer.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ScrollViewer.LineDown">
            <summary>
            Scrolls down by one line in the ScrollViewer.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ScrollViewer.LineLeft">
            <summary>
            Scrolls the content to the left by a single line width.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ScrollViewer.LineRight">
            <summary>
            Scrolls the content to the right by a single line width.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ScrollViewer.LineUp">
            <summary>
            Scrolls the content to the right by a single line width.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ScrollViewer.PageDown">
            <summary>
            Scrolls the content down by the height of the viewport.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ScrollViewer.PageLeft">
            <summary>
            Scrolls the content to the left by the width of the viewport.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ScrollViewer.PageRight">
            <summary>
            Scrolls the content to the right by the width of the viewport.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ScrollViewer.PageUp">
            <summary>
            Scrolls the content up by the height of the viewport.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.ScrollViewer.OnButtonDown(nanoFramework.UI.Input.ButtonEventArgs)">
            <summary>
            Handles button down events and scrolls the content accordingly.
            </summary>
            <param name="e">The button event arguments.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.SelectionChangedEventArgs">
            <summary>
            Provides data for the SelectionChanged event of a control.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.SelectionChangedEventArgs.PreviousSelectedIndex">
            <summary>
            Provides data for the SelectionChanged event of a control.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.SelectionChangedEventArgs.SelectedIndex">
            <summary>
            Gets the index of the newly selected item.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.SelectionChangedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the SelectionChangedEventArgs class with the specified previous and new selected indexes.
            </summary>
            <param name="previousIndex">The previous selected index.</param>
            <param name="newIndex">The new selected index.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.SelectionChangedEventHandler">
            <summary>
            Represents the method that will handle the SelectionChanged event of a control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A SelectionChangedEventArgs that contains the event data.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.StackPanel">
            <summary>
            Implements a layout panel that arranges child elements into a single line that can be oriented horizontally or vertically.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.StackPanel.#ctor">
            <summary>
            Initializes a new instance of the StackPanel class with vertical orientation.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.StackPanel.#ctor(nanoFramework.Presentation.Controls.Orientation)">
            <summary>
            Initializes a new instance of the StackPanel class with the specified orientation.
            </summary>
            <param name="orientation">The orientation to arrange content in.</param>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.StackPanel.Orientation">
            <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.StackPanel.MeasureOverride(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Measures the child elements of a StackPanel in anticipation of arranging them during the ArrangeOverride pass.
            </summary>
            <param name="availableWidth">The available width that a parent element can allocate a child element.</param>
            <param name="availableHeight">The available height that a parent element can allocate a child element.</param>
            <param name="desiredWidth">The desired width of the StackPanel.</param>
            <param name="desiredHeight">The desired height of the StackPanel.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.StackPanel.ArrangeOverride(System.Int32,System.Int32)">
            <summary>
            Positions child elements and determines a size for a StackPanel.
            </summary>
            <param name="arrangeWidth">The final width of the StackPanel.</param>
            <param name="arrangeHeight">The final height of the StackPanel.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.Text">
            <summary>
            Represents a text element that can be displayed on a user interface.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Text.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:nanoFramework.Presentation.Controls.Text"/> class.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Text.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:nanoFramework.Presentation.Controls.Text"/> class with the specified content.
            </summary>
            <param name="content">The text content to display.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Text.#ctor(nanoFramework.UI.Font,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:nanoFramework.Presentation.Controls.Text"/> class with the specified font and content.
            </summary>
            <param name="font">The font to use when rendering the text.</param>
            <param name="content">The text content to display.</param>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.Text.Font">
            <summary>
            Gets or sets the font used to render the text.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.Text.ForeColor">
            <summary>
            Gets or sets the font used to render the text.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.Text.TextContent">
            <summary>
            Gets or sets the text content to display.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.Text.Trimming">
            <summary>
            Gets or sets the text trimming behavior when the text does not fit within the available space.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.Text.TextAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.Text.LineHeight">
            <summary>
            Gets the height of each line of text, including any additional spacing.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.Text.TextWrap">
            <summary>
            Gets or sets a value indicating whether the text should be wrapped to the next line when it does not fit within the available space.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Text.MeasureOverride(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Measures the desired size of the control based on the available size and the text to display.
            </summary>
            <param name="availableWidth">The available width for the control.</param>
            <param name="availableHeight">The available height for the control.</param>
            <param name="desiredWidth">The desired width of the control.</param>
            <param name="desiredHeight">The desired height of the control.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.Text.OnRender(nanoFramework.Presentation.Media.DrawingContext)">
            <summary>
            Renders the control on the specified drawing context.
            </summary>
            <param name="dc">The drawing context to use for rendering.</param>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.Text._font">
            <summary>
            The font.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.Text._text">
            <summary>
            The text.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.TextFlow">
            <summary>
            Represents a flow of text, composed of one or more TextRuns, that can be displayed
            in a UIElement container. Provides properties to control scrolling, alignment, and layout.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.TextFlow.TextRuns">
            <summary>
            Gets or sets the collection of TextRuns that make up this TextFlow.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.TextFlow.#ctor">
            <summary>
            Initializes a new instance of the TextFlow class.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.TextFlow.ScrollingStyle">
            <summary>
            Gets or sets the scrolling style of this TextFlow.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.TextFlow.TextAlignment">
            <summary>
            Gets or sets the text alignment of this TextFlow.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.TextFlow.MeasureOverride(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Measures the desired size of the TextFlow given available width and height.
            </summary>
            <param name="availableWidth">The available width for the TextFlow.</param>
            <param name="availableHeight">The available height for the TextFlow.</param>
            <param name="desiredWidth">The desired width of the TextFlow.</param>
            <param name="desiredHeight">The desired height of the TextFlow.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.TextFlow.OnButtonDown(nanoFramework.UI.Input.ButtonEventArgs)">
            <summary>
            Overrides the base class OnButtonDown method to handle button events.
            </summary>
            <param name="e">The button event arguments.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.TextFlow.OnRender(nanoFramework.Presentation.Media.DrawingContext)">
            <summary>
            Overrides the base class OnRender method to render the text.
            </summary>
            <param name="dc">The drawing context.</param>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.TextFlow.TopLine">
            <summary>
            Gets or sets the top line to display.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.TextFlow.LineCount">
            <summary>
            Gets the number of lines in the text editor.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.TextRun">
            <summary>
            Represents a text run with a specific font and color.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.TextRun.Text">
            <summary>
            Gets the text of the current text run.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.TextRun.Font">
            <summary>
            Gets the font of the current text run.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.TextRun.ForeColor">
            <summary>
            Gets the foreground color of the current text run.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.TextRun.IsEndOfLine">
            <summary>
            Gets a value indicating whether the text run is at the end of a line.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.TextRun._width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Controls.TextRun._height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.TextRun.#ctor(System.String,nanoFramework.UI.Font,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the TextRun class with the specified text, font, and foreground color.
            </summary>
            <param name="text">The text of the text run.</param>
            <param name="font">The font of the text run.</param>
            <param name="foreColor">The foreground color of the text run.</param>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.TextRun.EndOfLine">
            <summary>
            Gets a text run that represents the end of a line.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.TextRun.Break(System.Int32,nanoFramework.Presentation.Controls.TextRun@,nanoFramework.Presentation.Controls.TextRun@,System.Boolean)">
            <summary>
            Splits the current text run at the specified available width and returns the resulting text runs.
            </summary>
            <param name="availableWidth">The available width at which to split the text run.</param>
            <param name="run1">When this method returns, contains the first part of the split text run if the split was successful; otherwise, null.</param>
            <param name="run2">When this method returns, contains the second part of the split text run if the split was successful; otherwise, null.</param>
            <param name="emergencyBreak">A value indicating whether an emergency break should be performed if a regular break cannot be found.</param>
            <returns>true if the text run was successfully split; otherwise, false.</returns>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.TextRun.GetSize(System.Int32@,System.Int32@)">
            <summary>
            Gets the size of the current text run.
            </summary>
            <param name="width">When this method returns, contains the width of the text run.</param>
            <param name="height">When this method returns, contains the height of the text run.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.TextRunCollection">
            <summary>
            Represents a collection of TextRun objects that can be added, removed, and modified.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.TextRunCollection.Count">
            <summary>
            Gets the number of elements in the TextRunCollection.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.TextRunCollection.Add(System.String,nanoFramework.UI.Font,System.Drawing.Color)">
            <summary>
            Adds a TextRun object to the TextRunCollection using the specified text, font, and foreground color, and returns the index at which the new TextRun was added.
            </summary>
            <param name="text">The text for the new TextRun.</param>
            <param name="font">The font for the new TextRun.</param>
            <param name="foreColor">The foreground color for the new TextRun.</param>
            <returns>The index at which the new TextRun was added.</returns>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.TextRunCollection.Add(nanoFramework.Presentation.Controls.TextRun)">
            <summary>
            Adds a TextRun object to the TextRunCollection and returns the index at which the new TextRun was added.
            </summary>
            <param name="textRun">The TextRun to add.</param>
            <returns>The index at which the new TextRun was added.</returns>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.TextRunCollection.Clear">
            <summary>
            Removes all elements from the TextRunCollection.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.TextRunCollection.Contains(nanoFramework.Presentation.Controls.TextRun)">
            <summary>
            Determines whether a specific TextRun object is in the TextRunCollection.
            </summary>
            <param name="run">The TextRun to locate in the TextRunCollection.</param>
            <returns>true if the TextRun is found in the TextRunCollection; otherwise, false.</returns>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.TextRunCollection.IndexOf(nanoFramework.Presentation.Controls.TextRun)">
            <summary>
            Searches for the specified TextRun and returns the zero-based index of the first occurrence within the entire TextRunCollection.
            </summary>
            <param name="run">The TextRun to locate in the TextRunCollection.</param>
            <returns>The zero-based index of the first occurrence of the TextRun within the entire TextRunCollection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.TextRunCollection.Insert(System.Int32,nanoFramework.Presentation.Controls.TextRun)">
            <summary>
            Inserts a TextRun object into the TextRunCollection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the TextRun should be inserted.</param>
            <param name="run">The TextRun to insert.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.TextRunCollection.Remove(nanoFramework.Presentation.Controls.TextRun)">
            <summary>
            Removes the specified TextRun object from the TextRunCollection.
            </summary>
            <param name="run">The TextRun to remove.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.TextRunCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the TextRun object at the specified index from the TextRunCollection.
            </summary>
            <param name="index">The zero-based index of the TextRun to remove.</param>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.TextRunCollection.Item(System.Int32)">
            <summary>
            Gets or sets the TextRun object at the specified index.
            </summary>
            <param name="index">The zero-based index of the TextRun to get or set.</param>
            <returns>The TextRun object at the specified index.</returns>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.TextRunCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the TextRunCollection is synchronized (thread safe). 
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.TextRunCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.TextRunCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.TextRunCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that iterates over the collection.</returns>
        </member>
        <member name="T:nanoFramework.Presentation.Controls.WrapPanel">
             <summary>
             WrapPanel is used to place child UIElements at sequential positions from left to the right 
             and then "wrap" the lines of children from top to the bottom.
            
             All children get the layout partition of size ItemWidth x ItemHeight.
             </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Controls.WrapPanel.ArrangeOverride(System.Int32,System.Int32)">
            <summary>
            <see cref="M:nanoFramework.Presentation.UIElement.ArrangeOverride(System.Int32,System.Int32)"/> 
            </summary> 
        </member>
        <member name="M:nanoFramework.Presentation.Controls.WrapPanel.MeasureOverride(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            <see cref="M:nanoFramework.Presentation.UIElement.MeasureOverride(System.Int32,System.Int32,System.Int32@,System.Int32@)"/>
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.WrapPanel.ItemWidth">
            <summary> 
            The ItemWidth and ItemHeight properties specify the size of all items in the WrapPanel.
            Note that children of WrapPanel may have their own Width/Height properties set - the ItemWidth/ItemHeight 
            specifies the size of "layout partition" reserved by WrapPanel for the child.
            If this property is not set (equal to 0) - the size of layout 
            partition is equal to DesiredSize of the child element.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.WrapPanel.ItemHeight">
            <summary> 
            The ItemWidth and ItemHeight properties specify the size of all items in the WrapPanel.
            Note that children of WrapPanel may have their own Width/Height properties set - the ItemWidth/ItemHeight 
            specifies the size of "layout partition" reserved by WrapPanel for the child.
            If this property is not set (equal to 0) - the size of layout 
            partition is equal to DesiredSize of the child element.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Controls.WrapPanel.Orientation">
            <summary>
            Specifies dimension of children positioning in absence of wrapping. 
            Wrapping occurs in orthogonal direction. For example, if Orientation is Horizontal,
            the items try to form horizontal rows first and if needed are wrapped and form vertical stack of rows. 
            If Orientation is Vertical, items first positioned in a vertical column, and if there is 
            not enough space - wrapping creates additional columns in horizontal dimension.
            </summary> 
        </member>
        <member name="T:nanoFramework.Presentation.HorizontalAlignment">
            <summary>
            Specifies the horizontal alignment of content within a container.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.HorizontalAlignment.Left">
            <summary>
            Content is aligned to the left of the container.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.HorizontalAlignment.Center">
            <summary>
            Content is aligned to the center of the container.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.HorizontalAlignment.Right">
            <summary>
            Content is aligned to the right of the container.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.HorizontalAlignment.Stretch">
            <summary>
            Content is stretched to fill the entire width of the container.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.Media.Brush">
            <summary>
            Represents a brush object used to fill shapes with a color or pattern.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Media.Brush.Opacity">
            <summary>
            Gets or sets the opacity of the brush.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Media.Brush.RenderRectangle(nanoFramework.UI.Bitmap,nanoFramework.Presentation.Media.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Renders a rectangle using the brush.
            </summary>
            <param name="bmp">The bitmap to render to.</param>
            <param name="outline">The pen used to outline the rectangle.</param>
            <param name="x">The x-coordinate of the rectangle.</param>
            <param name="y">The y-coordinate of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.Brush.RenderEllipse(nanoFramework.UI.Bitmap,nanoFramework.Presentation.Media.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Renders an ellipse using the brush.
            </summary>
            <param name="bmp">The bitmap to render to.</param>
            <param name="outline">The pen used to outline the ellipse.</param>
            <param name="x">The x-coordinate of the ellipse.</param>
            <param name="y">The y-coordinate of the ellipse.</param>
            <param name="xRadius">The x-radius of the ellipse.</param>
            <param name="yRadius">The y-radius of the ellipse.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.Brush.RenderPolygon(nanoFramework.UI.Bitmap,nanoFramework.Presentation.Media.Pen,System.Int32[])">
            <summary>
            Renders a polygon using the brush.
            </summary>
            <param name="bmp">The bitmap to render to.</param>
            <param name="outline">The pen used to outline the polygon.</param>
            <param name="pts">The points that define the polygon.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Media.BrushMappingMode">
            <summary>
            Specifies how a brush is mapped to a shape or region.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.BrushMappingMode.Absolute">
            <summary>
            The brush is mapped in absolute coordinates.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.BrushMappingMode.RelativeToBoundingBox">
            <summary>
            The brush is mapped relative to the bounding box of the shape or region.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.Media.Constants">
            <summary>
            Constants used in the graphics subsystem.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.Constants.MaxExtent">
            <summary>
            Maximun extent of a UIElement.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.Media.DrawingContext">
            <summary>
            Drawing Context.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.#ctor(nanoFramework.UI.Bitmap)">
            <summary>
            Creates a drawing context for the specified bitmap.
            </summary>
            <param name="bmp">The bitmap.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a drawing context for an empty bitmap of a specific width and height.
            </summary>
            <param name="width">The target width of the bitmap.</param>
            <param name="height">The target height of the bitmap.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.Translate(System.Int32,System.Int32)">
            <summary>
            Translates the drawing context by a specified amount.
            </summary>
            <param name="dx">The amount to translate in the x direction.</param>
            <param name="dy">The amount to translate in the y direction.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.GetTranslation(System.Int32@,System.Int32@)">
            <summary>
            Retrieves the current translation of the drawing context.
            </summary>
            <param name="x">Receives the x component of the translation.</param>
            <param name="y">Receives the y component of the translation.</param>
        </member>
        <member name="P:nanoFramework.Presentation.Media.DrawingContext.Bitmap">
            <summary>
            Gets the bitmap associated with this drawing context.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.Clear">
            <summary>
            Clears the bitmap associated with this drawing context.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.DrawPolygon(nanoFramework.Presentation.Media.Brush,nanoFramework.Presentation.Media.Pen,System.Int32[])">
            <summary>
            Draws a polygon with the specified brush and pen.
            </summary>
            <param name="brush">The brush to use to fill the polygon.</param>
            <param name="pen">The pen to use to draw the polygon edges.</param>
            <param name="pts">The points that define the vertices of the polygon.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.SetPixel(System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Sets the pixel at the specified coordinates to the specified color.
            </summary>
            <param name="color">The color to set the pixel to.</param>
            <param name="x">The x-coordinate of the pixel.</param>
            <param name="y">The y-coordinate of the pixel.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.DrawLine(nanoFramework.Presentation.Media.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line with the specified pen between the specified points.
            </summary>
            <param name="pen">The pen to use to draw the line.</param>
            <param name="x0">The x-coordinate of the start point of the line.</param>
            <param name="y0">The y-coordinate of the start point of the line.</param>
            <param name="x1">The x-coordinate of the end point of the line.</param>
            <param name="y1">The y-coordinate of the end point of the line.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.DrawEllipse(nanoFramework.Presentation.Media.Brush,nanoFramework.Presentation.Media.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse on the bitmap with the specified brush, pen, location, and radii.
            </summary>
            <param name="brush">The brush to fill the ellipse with.</param>
            <param name="pen">The pen used to draw the outline of the ellipse.</param>
            <param name="x">The x-coordinate of the upper-left corner of the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the ellipse.</param>
            <param name="xRadius">The x-radius of the ellipse.</param>
            <param name="yRadius">The y-radius of the ellipse.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.DrawImage(nanoFramework.UI.Bitmap,System.Int32,System.Int32)">
            <summary>
            Draws an image on the bitmap at the specified location.
            </summary>
            <param name="source">The bitmap to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the image.</param>
            <param name="y">The y-coordinate of the upper-left corner of the image.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.DrawImage(nanoFramework.UI.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a portion of the specified image on the bitmap at the specified location and with the specified size.
            </summary>
            <param name="source">The bitmap to draw a portion of.</param>
            <param name="destinationX">The x-coordinate of the upper-left corner of the destination rectangle.</param>
            <param name="destinationY">The y-coordinate of the upper-left corner of the destination rectangle.</param>
            <param name="sourceX">The x-coordinate of the upper-left corner of the source rectangle.</param>
            <param name="sourceY">The y-coordinate of the upper-left corner of the source rectangle.</param>
            <param name="sourceWidth">The width of the source rectangle.</param>
            <param name="sourceHeight">The height of the source rectangle.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.BlendImage(nanoFramework.UI.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Blends the specified source image onto the current bitmap at the specified location.
            </summary>
            <param name="source">The source image to blend onto the current bitmap.</param>
            <param name="destinationX">The x-coordinate of the upper-left corner of the destination rectangle.</param>
            <param name="destinationY">The y-coordinate of the upper-left corner of the destination rectangle.</param>
            <param name="sourceX">The x-coordinate of the upper-left corner of the source rectangle.</param>
            <param name="sourceY">The y-coordinate of the upper-left corner of the source rectangle.</param>
            <param name="sourceWidth">The width of the source rectangle.</param>
            <param name="sourceHeight">The height of the source rectangle.</param>
            <param name="opacity">The opacity of the blended image, where 0 is completely transparent and 256 is completely opaque.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.RotateImage(System.Int32,System.Int32,System.Int32,nanoFramework.UI.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Rotates the specified source image by the specified angle and blends it onto the current bitmap at the specified location.
            </summary>
            <param name="angle">The angle to rotate the source image, in degrees.</param>
            <param name="destinationX">The x-coordinate of the upper-left corner of the destination rectangle.</param>
            <param name="destinationY">The y-coordinate of the upper-left corner of the destination rectangle.</param>
            <param name="bitmap">The source image to rotate and blend onto the current bitmap.</param>
            <param name="sourceX">The x-coordinate of the upper-left corner of the source rectangle.</param>
            <param name="sourceY">The y-coordinate of the upper-left corner of the source rectangle.</param>
            <param name="sourceWidth">The width of the source rectangle.</param>
            <param name="sourceHeight">The height of the source rectangle.</param>
            <param name="opacity">The opacity of the blended image, where 0 is completely transparent and 256 is completely opaque.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.StretchImage(System.Int32,System.Int32,System.Int32,System.Int32,nanoFramework.UI.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Draws an image on the display, stretching it to fit the specified destination rectangle.
            </summary>
            <param name="xDst">The x-coordinate of the upper-left corner of the destination rectangle.</param>
            <param name="yDst">The y-coordinate of the upper-left corner of the destination rectangle.</param>
            <param name="widthDst">The width of the destination rectangle.</param>
            <param name="heightDst">The height of the destination rectangle.</param>
            <param name="bitmap">The source bitmap to draw.</param>
            <param name="xSrc">The x-coordinate of the upper-left corner of the portion of the source bitmap to draw.</param>
            <param name="ySrc">The y-coordinate of the upper-left corner of the portion of the source bitmap to draw.</param>
            <param name="widthSrc">The width of the portion of the source bitmap to draw.</param>
            <param name="heightSrc">The height of the portion of the source bitmap to draw.</param>
            <param name="opacity">The opacity of the image to draw, where 0 is fully transparent and 256 is fully opaque.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.TileImage(System.Int32,System.Int32,nanoFramework.UI.Bitmap,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Draws an image repeatedly on the display, tiling it to fill the specified rectangle.
            </summary>
            <param name="xDst">The x-coordinate of the upper-left corner of the destination rectangle.</param>
            <param name="yDst">The y-coordinate of the upper-left corner of the destination rectangle.</param>
            <param name="bitmap">The source bitmap to tile.</param>
            <param name="width">The width of the destination rectangle.</param>
            <param name="height">The height of the destination rectangle.</param>
            <param name="opacity">The opacity of the image to draw, where 0 is fully transparent and 256 is fully opaque.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.Scale9Image(System.Int32,System.Int32,System.Int32,System.Int32,nanoFramework.UI.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Draws a scalable nine-patch image on the display, scaling the middle section to fit the specified rectangle.
            </summary>
            <param name="xDst">The x-coordinate of the upper-left corner of the destination rectangle.</param>
            <param name="yDst">The y-coordinate of the upper-left corner of the destination rectangle.</param>
            <param name="widthDst">The width of the destination rectangle.</param>
            <param name="heightDst">The height of the destination rectangle.</param>
            <param name="bitmap">The source bitmap to draw.</param>
            <param name="leftBorder">The width of the left border.</param>
            <param name="topBorder">The height of the top border.</param>
            <param name="rightBorder">The width of the right border.</param>
            <param name="bottomBorder">The height of the bottom border.</param>
            <param name="opacity">The opacity of the image to draw, where 0 is fully transparent and 256 is fully opaque.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.DrawText(System.String,nanoFramework.UI.Font,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Draws a text string with the specified font and color at the specified position.
            </summary>
            <param name="text">The text string to draw.</param>
            <param name="font">The font used to draw the text.</param>
            <param name="color">The color used to draw the text.</param>
            <param name="x">The x-coordinate of the upper-left corner of the text string.</param>
            <param name="y">The y-coordinate of the upper-left corner of the text string.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.DrawText(System.String@,nanoFramework.UI.Font,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32,nanoFramework.Presentation.Media.TextAlignment,nanoFramework.Presentation.Media.TextTrimming)">
            <summary>
            Draws a text string with the specified font, color, width, and height at the specified position.
            </summary>
            <param name="text">The text string to draw.</param>
            <param name="font">The font used to draw the text.</param>
            <param name="color">The color used to draw the text.</param>
            <param name="x">The x-coordinate of the upper-left corner of the text string.</param>
            <param name="y">The y-coordinate of the upper-left corner of the text string.</param>
            <param name="width">The width of the text string.</param>
            <param name="height">The height of the text string.</param>
            <param name="alignment">The horizontal alignment of the text within the bounding rectangle.</param>
            <param name="trimming">The text trimming style to be applied to the text string.</param>
            <returns>True if the text string was drawn successfully; otherwise, false.</returns>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.GetClippingRectangle(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the clipping rectangle for the current context.
            </summary>
            <param name="x">The x-coordinate of the clipping rectangle.</param>
            <param name="y">The y-coordinate of the clipping rectangle.</param>
            <param name="width">The width of the clipping rectangle.</param>
            <param name="height">The height of the clipping rectangle.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.PushClippingRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Pushes a new clipping rectangle onto the stack.
            </summary>
            <param name="x">The x-coordinate of the clipping rectangle.</param>
            <param name="y">The y-coordinate of the clipping rectangle.</param>
            <param name="width">The width of the clipping rectangle.</param>
            <param name="height">The height of the clipping rectangle.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.PopClippingRectangle">
            <summary>
            Pops the top clipping rectangle from the stack.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.DrawRectangle(nanoFramework.Presentation.Media.Brush,nanoFramework.Presentation.Media.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle onto the bitmap using the specified brush and pen.
            </summary>
            <param name="brush">The brush to use for filling the rectangle.</param>
            <param name="pen">The pen to use for outlining the rectangle.</param>
            <param name="x">The x-coordinate of the top-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the top-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="P:nanoFramework.Presentation.Media.DrawingContext.Width">
            <summary>
            Gets the width of the bitmap.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Media.DrawingContext.Height">
            <summary>
            Gets the height of the bitmap.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.Dispose">
            <summary>
            Disposes of the bitmap and frees up any resources used by the object.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Media.DrawingContext.Dispose(System.Boolean)">
            <summary>
            Disposes of the bitmap and frees up any resources used by the object.
            </summary>
            <param name="disposing">True for disposing.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Media.ImageBrush">
            <summary>
            Represents a brush that paints an area with an image.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.ImageBrush.BitmapSource">
            <summary>
            Gets or sets the source bitmap for the brush.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.ImageBrush.Stretch">
            <summary>
            Gets or sets the stretch mode for the brush.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Media.ImageBrush.#ctor(nanoFramework.UI.Bitmap)">
            <summary>
            Initializes a new instance of the ImageBrush class with the specified bitmap.
            </summary>
            <param name="bmp">The source bitmap for the brush.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.ImageBrush.RenderRectangle(nanoFramework.UI.Bitmap,nanoFramework.Presentation.Media.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Renders a rectangle using the brush.
            </summary>
            <param name="bmp">The bitmap to render the rectangle on.</param>
            <param name="pen">The pen used to outline the rectangle.</param>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Media.LinearGradientBrush">
            <summary>
            Represents a linear gradient brush, which fills a shape with a gradient color
            that varies in a linear fashion between a start color and an end color.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.LinearGradientBrush.StartColor">
            <summary>
            Gets or sets the start color of the gradient brush.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.LinearGradientBrush.EndColor">
            <summary>
            Gets or sets the end color of the gradient brush.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.LinearGradientBrush.MappingMode">
            <summary>
            Gets or sets the mapping mode of the gradient brush.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.LinearGradientBrush.StartX">
            <summary>
            Gets or sets the X-coordinate of the starting point of the gradient brush.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.LinearGradientBrush.StartY">
            <summary>
            Gets or sets the Y-coordinate of the starting point of the gradient brush.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.LinearGradientBrush.EndX">
            <summary>
            Gets or sets the X-coordinate of the ending point of the gradient brush.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.LinearGradientBrush.EndY">
            <summary>
            Gets or sets the Y-coordinate of the ending point of the gradient brush.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.LinearGradientBrush.RelativeBoundingBoxSize">
            <summary>
            The size of the bounding box used in the relative mapping mode.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Media.LinearGradientBrush.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the LinearGradientBrush class
            with the specified start and end colors.
            </summary>
            <param name="startColor">The start color of the gradient brush.</param>
            <param name="endColor">The end color of the gradient brush.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.LinearGradientBrush.#ctor(System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the LinearGradientBrush class
            with the specified start and end colors and starting and ending points.
            </summary>
            <param name="startColor">The start color of the gradient brush.</param>
            <param name="endColor">The end color of the gradient brush.</param>
            <param name="startX">The X-coordinate of the starting point of the gradient brush.</param>
            <param name="startY">The Y-coordinate of the starting point of the gradient brush.</param>
            <param name="endX">The X-coordinate of the ending point of the gradient brush.</param>
            <param name="endY">The Y-coordinate of the ending point of the gradient brush.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.LinearGradientBrush.RenderRectangle(nanoFramework.UI.Bitmap,nanoFramework.Presentation.Media.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Renders a rectangle using the current brush and pen.
            </summary>
            <param name="bmp">The bitmap on which to draw the rectangle.</param>
            <param name="pen">The pen to use for the rectangle's outline, or null for no outline.</param>
            <param name="x">The x-coordinate of the top-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the top-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Media.MediaContext">
            <summary>
            The MediaContext class controls the rendering of graphics on the display device.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.MediaContext._currentRenderOp">
            <summary>
            Message delegate.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.MediaContext._isRendering">
            <summary>
            Indicates that we are in the middle of processing a render message.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Media.MediaContext.#ctor">
            <summary>
            Initializes a new instance of the MediaContext class.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Media.MediaContext.From(nanoFramework.UI.Threading.Dispatcher)">
            <summary>
            Gets the MediaContext object from the specified Dispatcher object.
            </summary>
            <param name="dispatcher">The Dispatcher object to get the MediaContext from.</param>
            <returns>The MediaContext object from the specified Dispatcher object.</returns>
        </member>
        <member name="M:nanoFramework.Presentation.Media.MediaContext.BeginInvokeOnRender(nanoFramework.UI.Threading.DispatcherOperationCallback,System.Object)">
            <summary>
            Adds a delegate to the Dispatcher queue to be processed when the rendering operation is next executed.
            </summary>
            <param name="callback">A delegate to be added to the Dispatcher queue.</param>
            <param name="arg">An object to be passed as an argument to the delegate.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.MediaContext.PostRender">
            <summary>
            If there is already a render operation in the Dispatcher queue, this
            method will do nothing.  If not, it will add a
            render operation.
            </summary>
            <remarks>
            This method should only be called when a render is necessary "right
            now."  Events such as a change to the visual tree would result in
            this method being called.
            </remarks>
        </member>
        <member name="M:nanoFramework.Presentation.Media.MediaContext.AddDirtyArea(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a dirty region of the display to the dirty regions collection to be redrawn.
            </summary>
            <param name="x">The x-coordinate of the dirty region.</param>
            <param name="y">The y-coordinate of the dirty region.</param>
            <param name="w">The width of the dirty region.</param>
            <param name="h">The height of the dirty region.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.MediaContext.RenderMessageHandler(System.Object)">
            <summary>
            This is the standard RenderMessageHandler callback, posted via PostRender()
            and Resize().  This wraps RenderMessageHandlerCore and emits an ETW events
            to trace its execution.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Media.MediaContext.Dispose">
            <summary>
            Disposes of the resources used by the MediaContext object.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Media.MediaContext.Dispose(System.Boolean)">
            <summary>
            Disposes of the resources used by the MediaContext object.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Media.Pen">
            <summary>
            Defines a pen used for drawing lines and shapes.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.Pen.Color">
            <summary>
            Gets or sets the color of the pen.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.Pen.Thickness">
            <summary>
            Gets or sets the thickness of the pen in pixels.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Media.Pen.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the Pen class with the specified color.
            </summary>
            <param name="color">The color of the pen.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.Pen.#ctor(System.Drawing.Color,System.UInt16)">
            <summary>
            Initializes a new instance of the Pen class with the specified color and thickness.
            </summary>
            <param name="color">The color of the pen.</param>
            <param name="thickness">The thickness of the pen in pixels.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Media.SolidColorBrush">
            <summary>
            A brush of a single, solid color.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.SolidColorBrush.Color">
            <summary>
            Gets or sets the color of this brush.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Media.SolidColorBrush.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:nanoFramework.Presentation.Media.SolidColorBrush"/> class with the specified color.
            </summary>
            <param name="color">The color of the brush.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.SolidColorBrush.RenderRectangle(nanoFramework.UI.Bitmap,nanoFramework.Presentation.Media.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Renders a rectangle with the specified dimensions and color.
            </summary>
            <param name="bmp">The bitmap on which to render the rectangle.</param>
            <param name="pen">The pen used to outline the rectangle.</param>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Media.SolidColorBrush.RenderEllipse(nanoFramework.UI.Bitmap,nanoFramework.Presentation.Media.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Renders an ellipse with the specified dimensions and color.
            </summary>
            <param name="bmp">The bitmap on which to render the ellipse.</param>
            <param name="pen">The pen used to outline the ellipse.</param>
            <param name="x">The x-coordinate of the center of the ellipse.</param>
            <param name="y">The y-coordinate of the center of the ellipse.</param>
            <param name="xRadius">The horizontal radius of the ellipse.</param>
            <param name="yRadius">The vertical radius of the ellipse.</param>
        </member>
        <member name="F:nanoFramework.Presentation.Media.SolidColorBrush.LineSegment.dx">
            <summary>
            We will use Bresenham alg for line calc.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Media.SolidColorBrush.RenderPolygon(nanoFramework.UI.Bitmap,nanoFramework.Presentation.Media.Pen,System.Int32[])">
            <summary>
            Renders a polygon with the specified points and color.
            Basic algorithm uses scan lines to fill the polygon.
            No multiplication or division is needed, neither is floating point calculation.
            </summary>
            <param name="bmp">The bitmap on which to render the polygon.</param>
            <param name="outline">The pen used to outline the polygon.</param>
            <param name="pts">The array of points that make up the polygon.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Media.Stretch">
            <summary>
            Specifies how a content should be resized to fill its allocated space.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.Stretch.None">
            <summary>
            The content is not resized.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.Stretch.Fill">
            <summary>
            The content is resized to fill its allocated space.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.Media.TextAlignment">
            <summary>
            Specifies the horizontal alignment of text.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.TextAlignment.Left">
            <summary>
            Text is aligned to the left.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.TextAlignment.Center">
            <summary>
            Text is centered.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.TextAlignment.Right">
            <summary>
            Text is aligned to the right.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.Media.TextTrimming">
            <summary>
            Specifies how text is trimmed when it overflows the edge of a container.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.TextTrimming.CharacterEllipsis">
            <summary>
            Text is trimmed at the end of the last fully displayed character.
            An ellipsis (...) is inserted to indicate that text has been truncated.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.TextTrimming.None">
            <summary>
            Text is not trimmed and may overflow the edge of the container.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Media.TextTrimming.WordEllipsis">
            <summary>
            Text is trimmed at the end of the last fully displayed word.
            An ellipsis (...) is inserted to indicate that text has been truncated.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.PresentationSource">
            <summary>
            Presentation source is our connection to the rest of the managed system.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.PresentationSource.#ctor">
            <summary>
                Constructs an instance of the PresentationSource object.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.PresentationSource.RootUIElement">
            <summary>
            The Root UIElement for this source.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.Shapes.Direction">
            <summary>
            Specifies the direction of a layout or movement.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Shapes.Direction.TopToBottom">
            <summary>
            Specifies that the layout or movement should occur from top to bottom.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Shapes.Direction.BottomToTop">
            <summary>
            Specifies that the layout or movement should occur from bottom to top.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.Shapes.Ellipse">
            <summary>
            Defines an ellipse shape.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Shapes.Ellipse.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Ellipse class with the specified radii.
            </summary>
            <param name="xRadius">The x-radius of the ellipse.</param>
            <param name="yRadius">The y-radius of the ellipse.</param>
            <exception cref="T:System.ArgumentException">Thrown when either radius is less than zero.</exception>
        </member>
        <member name="M:nanoFramework.Presentation.Shapes.Ellipse.OnRender(nanoFramework.Presentation.Media.DrawingContext)">
            <summary>
            Draws the ellipse on a Media.DrawingContext.
            </summary>
            <param name="dc">The Media.DrawingContext on which to draw the ellipse.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Shapes.Line">
            <summary>
            Represents a line shape that can be rendered on a display.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Shapes.Line.#ctor">
            <summary>
            Initializes a new instance of the Line class with default values.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Shapes.Line.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Line class with the specified dimensions.
            </summary>
            <param name="dx">The width of the line.</param>
            <param name="dy">The height of the line.</param>
        </member>
        <member name="P:nanoFramework.Presentation.Shapes.Line.Direction">
            <summary>
            Gets or sets the direction of the line.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Shapes.Line.OnRender(nanoFramework.Presentation.Media.DrawingContext)">
            <summary>
            Renders the line shape using the specified DrawingContext object.
            </summary>
            <param name="dc">The DrawingContext object to use for rendering.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Shapes.Polygon">
            <summary>
            Represents a polygon shape.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Shapes.Polygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:nanoFramework.Presentation.Shapes.Polygon"/> class.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Shapes.Polygon.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:nanoFramework.Presentation.Shapes.Polygon"/> class with the specified points.
            </summary>
            <param name="pts">The points of the polygon.</param>
        </member>
        <member name="P:nanoFramework.Presentation.Shapes.Polygon.Points">
            <summary>
            Gets or sets the points of the polygon.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Shapes.Polygon.OnRender(nanoFramework.Presentation.Media.DrawingContext)">
            <summary>
            Renders the polygon on the specified drawing context.
            </summary>
            <param name="dc">The drawing context.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Shapes.Rectangle">
            <summary>
            Represents a rectangle shape.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Shapes.Rectangle.#ctor">
            <summary>
            Initializes a new instance of the Rectangle class.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Shapes.Rectangle.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Rectangle class with the specified width and height.
            </summary>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:nanoFramework.Presentation.Shapes.Rectangle.OnRender(nanoFramework.Presentation.Media.DrawingContext)">
            <summary>
            Renders the Rectangle shape.
            </summary>
            <param name="dc">The drawing context to use for rendering.</param>
        </member>
        <member name="T:nanoFramework.Presentation.Shapes.Shape">
            <summary>
            Abstract base class for shapes that can be drawn on a screen.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Shapes.Shape.Fill">
            <summary>
            Gets or sets the brush used to fill the shape.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Shapes.Shape.Stroke">
            <summary>
            
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.SizeToContent">
            <summary>
            Size To Content.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.SizeToContent.Manual">
            <summary>
            Does not size to content.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.SizeToContent.Width">
            <summary>
            Sizes Width to content's Width.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.SizeToContent.Height">
            <summary>
            Sizes Height to content's Height.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.SizeToContent.WidthAndHeight">
            <summary>
            Sizes both Width and Height to content's size.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.UIElement">
            <summary>
            Represents a base class for all UI elements.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.UIElement._horizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the element.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.UIElement._verticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the element.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.UIElement.Pair.Flags_First">
            <summary>
            
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.UIElement.Pair.Flags_Second">
            <summary>
            
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.UIElement.Pair._first">
            <summary>
            
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.UIElement.Pair._second">
            <summary>
            
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.UIElement.Pair._status">
            <summary>
            
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.#ctor">
            <summary>
            Initializes a new instance of the UIElement class.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.OnGenericEvent(nanoFramework.UI.Input.GenericEventArgs)">
            <summary>
            Raises the GenericEvent event.
            </summary>
            <param name="e">Provides data for the GenericEvent event.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.OnTouchDown(nanoFramework.UI.Input.TouchEventArgs)">
            <summary>
            Occurs when a touch event is detected on the control.
            </summary>
            <param name="e">The TouchEventArgs instance containing the event data.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.OnTouchUp(nanoFramework.UI.Input.TouchEventArgs)">
            <summary>
            Occurs when a touch event is completed on the control.
            </summary>
            <param name="e">The TouchEventArgs instance containing the event data.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.OnTouchMove(nanoFramework.UI.Input.TouchEventArgs)">
            <summary>
            Occurs when the position of a touch event changes on the control.
            </summary>
            <param name="e">The TouchEventArgs instance containing the event data.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.OnTouchGestureStarted(nanoFramework.UI.TouchGestureEventArgs)">
            <summary>
            Occurs when a touch gesture is started on the control.
            </summary>
            <param name="e">The TouchGestureEventArgs instance containing the event data.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.OnTouchGestureChanged(nanoFramework.UI.TouchGestureEventArgs)">
            <summary>
            Occurs when a touch gesture is started on the control.
            </summary>
            <param name="e">The TouchGestureEventArgs instance containing the event data.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.OnTouchGestureEnded(nanoFramework.UI.TouchGestureEventArgs)">
            <summary>
            Occurs when a touch gesture on the control is completed.
            </summary>
            <param name="e">The TouchGestureEventArgs instance containing the event data.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.OnPreviewButtonDown(nanoFramework.UI.Input.ButtonEventArgs)">
            <summary>
            Occurs when a button press is previewed on the control.
            </summary>
            <param name="e">The ButtonEventArgs instance containing the event data.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.OnButtonDown(nanoFramework.UI.Input.ButtonEventArgs)">
            <summary>
            Occurs when a button is pressed on the control.
            </summary>
            <param name="e">The ButtonEventArgs instance containing the event data.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.OnPreviewButtonUp(nanoFramework.UI.Input.ButtonEventArgs)">
            <summary>
            Occurs when a button press is previewed on the control.
            </summary>
            <param name="e">The ButtonEventArgs instance containing the event data.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.OnButtonUp(nanoFramework.UI.Input.ButtonEventArgs)">
            <summary>
            Occurs when a button is released on the control.
            </summary>
            <param name="e">The ButtonEventArgs instance containing the event data.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.OnGotFocus(nanoFramework.UI.Input.FocusChangedEventArgs)">
            <summary>
            Occurs when the control receives focus.
            </summary>
            <param name="e">The FocusChangedEventArgs instance containing the event data.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.OnLostFocus(nanoFramework.UI.Input.FocusChangedEventArgs)">
            <summary>
            Occurs when the control loses focus.
            </summary>
            <param name="e">The FocusChangedEventArgs instance containing the event data.</param>
        </member>
        <member name="E:nanoFramework.Presentation.UIElement.TouchDown">
            <summary>
            Occurs when a touch-down event occurs on this element.
            </summary>
        </member>
        <member name="E:nanoFramework.Presentation.UIElement.TouchUp">
            <summary>
            Occurs when a touch-up event occurs on this element.
            </summary>
        </member>
        <member name="E:nanoFramework.Presentation.UIElement.TouchMove">
            <summary>
            Occurs when a touch-move event occurs on this element.
            </summary>
        </member>
        <member name="E:nanoFramework.Presentation.UIElement.TouchGestureStart">
            <summary>
            Occurs when a touch gesture-start event occurs on this element.
            </summary>
        </member>
        <member name="E:nanoFramework.Presentation.UIElement.TouchGestureChanged">
            <summary>
            Occurs when a touch gesture-changed event occurs on this element.
            </summary>
        </member>
        <member name="E:nanoFramework.Presentation.UIElement.TouchGestureEnd">
            <summary>
            Occurs when a touch gesture-end event occurs on this element.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.GetDesiredSize(System.Int32@,System.Int32@)">
            <summary>
            Gets the desired size of this element.
            </summary>
            <param name="width">When this method returns, contains the desired width of this element.</param>
            <param name="height">When this method returns, contains the desired height of this element.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.GetMargin(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the margin thickness of this element.
            </summary>
            <param name="left">When this method returns, contains the left margin thickness of this element.</param>
            <param name="top">When this method returns, contains the top margin thickness of this element.</param>
            <param name="right">When this method returns, contains the right margin thickness of this element.</param>
            <param name="bottom">When this method returns, contains the bottom margin thickness of this element.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.SetMargin(System.Int32)">
            <summary>
            Sets the margin thickness for all four sides of this element.
            </summary>
            <param name="length">The thickness to set for all four sides of this element.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.SetMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the margin thickness for each side of this element.
            </summary>
            <param name="left">The thickness to set for the left side of this element.</param>
            <param name="top">The thickness to set for the top side of this element.</param>
            <param name="right">The thickness to set for the right side of this element.</param>
            <param name="bottom">The thickness to set for the bottom side of this element.</param>
        </member>
        <member name="P:nanoFramework.Presentation.UIElement.ActualWidth">
            <summary>
            Gets the actual width of the UIElement.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.UIElement.ActualHeight">
            <summary>
            Gets the actual height of the UIElement.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.UIElement.Height">
            <summary>
            Gets or sets the height of the UIElement.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.UIElement.Width">
            <summary>
            Gets or sets the width of the UIElement.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.GetLayoutOffset(System.Int32@,System.Int32@)">
            <summary>
            Gets the X and Y offset of the UIElement's layout.
            </summary>
            <param name="x">The X offset of the UIElement's layout.</param>
            <param name="y">The Y offset of the UIElement's layout.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.GetRenderSize(System.Int32@,System.Int32@)">
            <summary>
            Gets the width and height of the UIElement's rendered content.
            </summary>
            <param name="width">The width of the UIElement's rendered content.</param>
            <param name="height">The height of the UIElement's rendered content.</param>
        </member>
        <member name="P:nanoFramework.Presentation.UIElement.LogicalChildren">
            <summary>
            Gets the collection of child elements of the UIElement.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.OnChildrenChanged(nanoFramework.Presentation.UIElement,nanoFramework.Presentation.UIElement,System.Int32)">
            <summary>
            Called when the UIElementCollection of the UIElement is edited.
            </summary>
            <param name="added">The UIElement that was added to the collection.</param>
            <param name="removed">The UIElement that was removed from the collection.</param>
            <param name="indexAffected">The index at which the collection was edited.</param>
        </member>
        <member name="P:nanoFramework.Presentation.UIElement.IsFocused">
            <summary>
                A property indicating if the button is focused on this
                element or not.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.ComputeAlignmentOffset(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Computes the alignment offset given the clientWidth, clientHeight,
            arrangeWidth, arrangeHeight, horizontal alignment, and vertical alignment.
            </summary>
            <param name="clientWidth">The client width.</param>
            <param name="clientHeight">The client height.</param>
            <param name="arrangeWidth">The arrange width.</param>
            <param name="arrangeHeight">The arrange height.</param>
            <param name="dx">The horizontal offset.</param>
            <param name="dy">The vertical offset.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.PropagateSuspendLayout(nanoFramework.Presentation.UIElement)">
            <summary>
            Recursively propagates IsLayoutSuspended flag down to the whole v's sub tree.
            </summary>
            <param name="v">The UI element.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.PropagateResumeLayout(nanoFramework.Presentation.UIElement)">
            <summary>
            Recursively resets IsLayoutSuspended flag on all visuals of the whole v's sub tree.
            For UIElements also re-inserts the UIElement into Measure and / or Arrange update queues
            if necessary.
            </summary>
            <param name="e">The UI Element.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.Measure(System.Int32,System.Int32)">
            <summary>
            Updates DesiredSize of the UIElement. Must be called by parents from their MeasureOverride, to form recursive update.
            This is first pass of layout update.
            </summary>
            <remarks>
            Measure is called by parents on their children. Internally, Measure calls MeasureOverride override on the same object,
            giving it opportunity to compute its DesiredSize.<para/>
            This method will return immediately if child is not Dirty, previously measured
            and availableSize is the same as cached. <para/>
            This method also resets the IsMeasureinvalid bit on the child.<para/>
            In case when "unbounded measure to content" is needed, parent can use availableSize
            as double.PositiveInfinity. Any returned size is OK in this case.
            </remarks>
            <param name="availableWidth">Available width that parent can give to the child. May be MaxValue (when parent wants to
            measure to content). This is soft constraint. Child can return bigger size to indicate that it wants bigger space and hope
            that parent can throw in scrolling...</param>
            <param name="availableHeight">Available height that parent can give to the child. May be MaxValue (when parent wants to
            measure to content). This is soft constraint. Child can return bigger size to indicate that it wants bigger space and hope
            that parent can throw in scrolling...</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.Arrange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Parents or system call this method to arrange the internals of children on a second pass of layout update.
            </summary>
            <remarks>
            This method internally calls ArrangeOverride override, giving the derived class opportunity
            to arrange its children and/or content using final computed size.
            In their ArrangeOverride overrides, derived class is supposed to create its visual structure and
            prepare itself for rendering. Arrange is called by parents
            from their implementation of ArrangeOverride or by system when needed.
            This method sets Bounds=finalSize before calling ArrangeOverride.
            </remarks>
            <param name="finalRectX">This is the final X location that parent or system wants this UIElement to assume.</param>
            <param name="finalRectY">This is the final Y location that parent or system wants this UIElement to assume.</param>
            <param name="finalRectWidth">This is the Width that parent or system wants this UIElement to assume.</param>
            <param name="finalRectHeight">This is the height that parent or system wants this UIElement to assume.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.MeasureOverride(System.Int32,System.Int32,System.Int32@,System.Int32@)">
             <summary>
             Measurement override. Implement your size-to-content logic here.
             </summary>
             <remarks>
             MeasureOverride is designed to be the main customizability point for size control of layout.
             UIElement authors should override this method, call Measure on each child UIElement,
             and compute their desired size based upon the measurement of the children.
             The return value should be the desired size.<para/>
             Note: It is required that a parent UIElement calls Measure on each child or they won't be sized/arranged.
             Typical override follows a pattern roughly like this (pseudo-code):
             <example>
                 <code lang="C#">
             <![CDATA[
            
             protected override void MeasureOverride(int avialableWidth, int availableHeight, out int desiredWidth, out int desiredHeight)
             {
                 foreach (UIElement child in VisualChildren)
                 {
                     child.Measure(availableSize);
                     availableSize.Deflate(child.DesiredSize);
                     _cache.StoreInfoAboutChild(child);
                 }
            
                 Size desired = CalculateBasedOnCache(_cache);
                 return desired;
             }
             ]]>
                 </code>
             </example>
             The key aspects of this snippet are:
                 <list type="bullet">
             <item>You must call Measure on each child UIElement</item>
             <item>It is common to cache measurement information between the MeasureOverride and ArrangeOverride method calls</item>
             <item>Calling base.MeasureOverride is not required.</item>
             <item>Calls to Measure on children are passing either the same availableSize as the parent, or a subset of the area depending
             on the type of layout the parent will perform (for example, it would be valid to remove the area
             for some border or padding).</item>
                 </list>
             </remarks>
             <param name="availableWidth">Available size that parent can give to the child. May be MaxValue(when parent wants to
             measure to content). This is soft constraint. Child can return bigger size to indicate that it wants bigger space and hope
             that parent can throw in scrolling...</param>
             <param name="availableHeight"></param>
             <param name="desiredWidth"></param>
             <param name="desiredHeight"></param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.ArrangeOverride(System.Int32,System.Int32)">
             <summary>
             ArrangeOverride allows for the customization of the final sizing and positioning of children.
             </summary>
             <remarks>
             UIElement authors should override this method, call Arrange on each visible child UIElement,
             to size and position each child UIElement by passing a rectangle reserved for the child within parent space.
             Note: It is required that a parent UIElement calls Arrange on each child or they won't be rendered.
             Typical override follows a pattern roughly like this (pseudo-code):
             <example>
                 <code lang="C#">
             <![CDATA[
            
             protected override void ArrangeOverride(int arrangeWidth, int arrangeHeight)
             {
            
                 foreach (UIElement child in VisualChildren)
                 {
                     child.Arrange(new Rect(childX, childY, childWidth, childHeight);
                 }
             }
             ]]>
                 </code>
             </example>
             </remarks>
             <param name="arrangeWidth">Final width</param>
             <param name="arrangeHeight">Final height</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.UpdateLayout">
            <summary>
            Call this method to ensure that the whoel subtree of elements that includes this UIElement
            is properly updated.
            </summary>
            <remarks>
            This ensures that UIElements with IsMeasureInvalid or IsArrangeInvalid will
            get call to their MeasureOverride and ArrangeOverride, and all computed sizes will be validated.
            This method does nothing if layout is clean but it does work if layout is not clean so avoid calling
            it after each change in the UIElement tree. It makes sense to either never call it (system will do this
            in a deferred manner) or only call it if you absolutely need updated sizes and positions after you do all changes.
            </remarks>
        </member>
        <member name="P:nanoFramework.Presentation.UIElement.IsMeasureValid">
            <summary>
            Determines if the DesiredSize is valid.
            </summary>
            <remarks>
            A developer can force arrangement to be invalidated by calling InvalidateMeasure.
            IsArrangeValid and IsMeasureValid are related,
            in that arrangement cannot be valid without measurement first being valid.
            </remarks>
        </member>
        <member name="P:nanoFramework.Presentation.UIElement.IsArrangeValid">
            <summary>
            Determines if the RenderSize and position of child elements is valid.
            </summary>
            <remarks>
            A developer can force arrangement to be invalidated by calling InvalidateArrange.
            IsArrangeValid and IsMeasureValid are related, in that arrangement cannot be valid without measurement first
            being valid.
            </remarks>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.ChildElementFromPoint(System.Int32,System.Int32)">
            <summary>
            Given x, y co-ordinates of the parent UIElement,
            find the child control that is directly underneath that point.
            If there are multiple such controls, the one that was created/inserted
            into the list last wins. This is because we don't have explicit z-ordering
            right now.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.GetUnclippedSize(System.Int32@,System.Int32@)">
            <summary>
            Retrieves the unclipped size of the UIElement.
            </summary>
            <param name="width">Output parameter for the unclipped width.</param>
            <param name="height">Output parameter for the unclipped height.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.ContainsPoint(System.Int32,System.Int32)">
            <summary>
            Determines whether the point (x, y) is contained within the UIElement.
            </summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
            <returns>True if the point is contained within the UIElement; otherwise, false.</returns>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.GetPointerTarget(System.Int32,System.Int32)">
            <summary>
            Retrieves the UIElement that is the target of a pointer event at the given point (x, y).
            </summary>
            <param name="x">The x-coordinate of the pointer event.</param>
            <param name="y">The y-coordinate of the pointer event.</param>
            <returns>The UIElement that is the target of the pointer event; otherwise, null.</returns>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.PointToScreen(System.Int32@,System.Int32@)">
            <summary>
            We are deviating little from their desktop counter parts, mostly for simplicity and perf.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.PointToClient(System.Int32@,System.Int32@)">
            <summary>
            Translates a point from client coordinates to screen coordinates.
            </summary>
            <param name="x">The x-coordinate of the point to be translated.</param>
            <param name="y">The y-coordinate of the point to be translated.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.IsRenderable">
            <summary>
            Determines whether the UIElement is renderable. A UIElement is renderable if it has been measured and arranged and its visibility is not set to collapsed or hidden.
            </summary>
            <returns>True if the UIElement is renderable; otherwise, false.</returns>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.InvalidateMeasure">
            <summary>
            Invalidates the measurement state for the UIElement.
            This has the effect of also invalidating the arrange state for the UIElement.
            The UIElement will be queued for an update layout that will occur asynchronously.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.InvalidateArrange">
            <summary>
            Invalidates the arrange state for the UIElement.
            The UIElement will be queued for an update layout that will occur asynchronously.
            MeasureOverride will not be called unless InvalidateMeasure is also called - or that something
            else caused the measure state to be invalidated.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.UIElement.Parent">
            <summary>
            Gets the parent UIElement of this UIElement.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.UIElement.RootUIElement">
            <summary>
            Gets the root UIElement of this UIElement.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.GetIsRootElement">
            <summary>
            The CompositionTarget marks the root element. The root element is responsible
            for posting renders. This method is also used to ensure that the Visual is not
            used in multiple CompositionTargets.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.UIElement.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the element.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.UIElement.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the element.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.OnChildDesiredSizeChanged(nanoFramework.Presentation.UIElement)">
            <summary>
            Notification that is called by Measure of a child when
            it ends up with different desired size for the child.
            </summary>
            <remarks>
            Default implementation simply calls invalidateMeasure(), assuming that layout of a
            parent should be updated after child changed its size.<para/>
            Finer point: this method can only be called in the scenario when the system calls Measure on a child,
            not when parent calls it since if parent calls it, it means parent has dirty layout and is recalculating already.
            </remarks>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.OnRender(nanoFramework.Presentation.Media.DrawingContext)">
            <summary>
            Renders the element using the specified DrawingContext.
            </summary>
            <param name="dc">The drawing context.</param>
        </member>
        <member name="P:nanoFramework.Presentation.UIElement.Visibility">
            <summary>
            Gets or sets the visibility of the element.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.UIElement.IsVisible">
            <summary>
            Gets a value indicating whether the element is currently visible.
            </summary>
        </member>
        <member name="E:nanoFramework.Presentation.UIElement.IsVisibleChanged">
            <summary>
            Occurs when the value of the IsVisible property changes.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.UIElement.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the element is enabled.
            </summary>
        </member>
        <member name="E:nanoFramework.Presentation.UIElement.IsEnabledChanged">
            <summary>
            Event raised when the value of the IsEnabled property changes.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.RenderRecursive(nanoFramework.Presentation.Media.DrawingContext)">
            <summary>
            Renders the element and its child elements recursively using the specified DrawingContext.
            </summary>
            <param name="dc">The DrawingContext to use for rendering.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.PropagateFlags(nanoFramework.Presentation.UIElement,nanoFramework.Presentation.UIElement.Flags)">
            <summary>
            Propagates the specified flags up the visual tree until an element with those flags set is found.
            </summary>
            <param name="e">The UIElement to start the propagation from.</param>
            <param name="flags">The Flags to propagate up the visual tree.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.MarkDirtyRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Marks a region of the UIElement as dirty and invalidates the layout.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the region.</param>
            <param name="y">The y-coordinate of the upper-left corner of the region.</param>
            <param name="w">The width of the region.</param>
            <param name="h">The height of the region.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.InvalidateRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Marks a region of the UIElement as dirty and invalidates the layout.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the region.</param>
            <param name="y">The y-coordinate of the upper-left corner of the region.</param>
            <param name="w">The width of the region.</param>
            <param name="h">The height of the region.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.Invalidate">
            <summary>
            Invalidates the entire layout of the UIElement.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.RaiseEvent(nanoFramework.UI.RoutedEventArgs)">
             <summary>
                 Raise the events specified by
                 <see cref="P:nanoFramework.UI.RoutedEventArgs.RoutedEvent"/>
             </summary>
             <remarks>
                 This method is a shorthand for
                 This method walks up the visual tree, calling
                 cref="UIElement.BuildRouteCore"
                 on every cref="UIElement"
            
                 NOTE: The RoutedEvent in RoutedEventArgs
                 and EventRoute must be matched
            
                 Once the route is built, it calls InvokeHandlers()
             </remarks>
             <param name="args">
                 <see cref="T:nanoFramework.UI.RoutedEventArgs"/> for the event to
                 be raised
             </param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.AddToEventRoute(nanoFramework.UI.EventRoute,nanoFramework.UI.RoutedEventArgs)">
            <summary>
                Add the event handlers for this element to the route.
            </summary>
            <param name="route">The route event.</param>
            <param name="args">The route event arguments.</param>
        </member>
        <member name="P:nanoFramework.Presentation.UIElement.InstanceEventHandlersStore">
            <summary>
            Ensure the store has been created.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.UIElement.AddHandler(nanoFramework.UI.RoutedEvent,nanoFramework.UI.RoutedEventHandler,System.Boolean)">
             <summary>
                 Adds a routed event handler for the particular
                 <see cref="T:nanoFramework.UI.RoutedEvent"/>
             </summary>
             <remarks>
                 The handler added thus is also known as
                 an instance handler <para/>
                 <para/>
            
                 NOTE: It is not an error to add a handler twice
                 (handler will simply be called twice) <para/>
                 <para/>
            
                 Input parameters <see cref="T:nanoFramework.UI.RoutedEvent"/>
                 and handler cannot be null <para/>
                 handledEventsToo input parameter when false means
                 that listener does not care about already handled events.
                 Hence the handler will not be invoked on the target if
                 the RoutedEvent has already been
                 <see cref="P:nanoFramework.UI.RoutedEventArgs.Handled"/> <para/>
                 handledEventsToo input parameter when true means
                 that the listener wants to hear about all events even if
                 they have already been handled. Hence the handler will
                 be invoked irrespective of the event being
                 <see cref="P:nanoFramework.UI.RoutedEventArgs.Handled"/>
             </remarks>
             <param name="routedEvent">
                 <see cref="T:nanoFramework.UI.RoutedEvent"/> for which the handler
                 is attached
             </param>
             <param name="handler">
                 The handler that will be invoked on this object
                 when the RoutedEvent is raised
             </param>
             <param name="handledEventsToo">
                 Flag indicating whether or not the listener wants to
                 hear about events that have already been handled
             </param>
        </member>
        <member name="T:nanoFramework.Presentation.UIElementCollection">
             <summary>
             A UIElementCollection is a ordered collection of UIElements.
             </summary>
             <remarks>
             A UIElementCollection has implied context affinity. It is a violation to access
             the collection from a different context than that of the owning Element
            
             This collection is an amalgam of UIElementCollection and UIElementCollection from Avalon
            
             </remarks>
        </member>
        <member name="M:nanoFramework.Presentation.UIElementCollection.#ctor(nanoFramework.Presentation.UIElement)">
            <summary>
            Represents a collection of UIElement objects.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.UIElementCollection.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.UIElementCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.UIElementCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.UIElementCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the UIElement collection to the specified array starting at the specified index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from UIElementCollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElementCollection.CopyTo(nanoFramework.Presentation.UIElement[],System.Int32)">
            <summary>
            Strongly typed version of CopyTo
            Copies the collection into the Array.
            </summary>
            <param name="array">The array to copy the collection to.</param>
            <param name="index">The index in the array at which to start copying.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElementCollection.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that the capacity of this list is at least the given minimum
            value. If the currect capacity of the list is less than min, the
            capacity is increased to min.
            </summary>
            <param name="min">The minimum capacity to ensure.</param>
        </member>
        <member name="P:nanoFramework.Presentation.UIElementCollection.Capacity">
             <summary>
             Gets or sets the number of elements that the UIElementCollection can contain.
             </summary>
             <value>
             The number of elements that the UIElementCollection can contain.
             </value>
             <remarks>
             Capacity is the number of elements that the UIElementCollection is capable of storing.
             Count is the number of UIElements that are actually in the UIElementCollection.
            
             Capacity is always greater than or equal to Count. If Count exceeds
             Capacity while adding elements, the capacity of the UIElementCollection is increased.
            
             By default the capacity is 0.
             </remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">Capacity is set to a value that is less than Count.</exception>
        </member>
        <member name="P:nanoFramework.Presentation.UIElementCollection.Item(System.Int32)">
            <summary>
            Indexer for the UIElementCollection. Gets or sets the UIElement stored at the
            zero-based index of the UIElementCollection.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <remarks>This property provides the ability to access a specific UIElement in the
            UIElementCollection by using the following systax: <c>myUIElementCollection[index]</c>.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>index</c> is less than zero -or- <c>index</c> is equal to or greater than Count.</exception>
            <exception cref="T:System.ArgumentException">If the new child has already a parent or if the slot a the specified index is not null.</exception>
        </member>
        <member name="M:nanoFramework.Presentation.UIElementCollection.ConnectChild(System.Int32,nanoFramework.Presentation.UIElement)">
            <summary>
            Sets the specified element at the specified index into the child
            collection. It also corrects the parent.
            Note that the function requires that _item[index] == null and it
            also requires that the passed in child is not connected to another UIElement.
            </summary>
            <param name="index">The index to insert the element into.</param>
            <param name="value">The element to insert into the collection.</param>
            <exception cref="T:System.ArgumentException">If the new child has already a parent or if the slot a the specified index is not null.</exception>
        </member>
        <member name="M:nanoFramework.Presentation.UIElementCollection.DisconnectChild(System.Int32)">
            <summary>
            Disconnects a child.
            </summary>
            <param name="index">The index of the child to disconnect.</param>
        </member>
        <member name="M:nanoFramework.Presentation.UIElementCollection.Add(nanoFramework.Presentation.UIElement)">
            <summary>
            Appends a UIElement to the end of the UIElementCollection.
            </summary>
            <param name="element">The UIElement to append.</param>
            <returns>The UIElementCollection index at which the UIElement has been added.</returns>
            <remarks>Adding a null is allowed.</remarks>
            <summary>
            </summary>
            <exception cref="T:System.ArgumentException">If the new child has already a parent.</exception>
        </member>
        <member name="M:nanoFramework.Presentation.UIElementCollection.IndexOf(nanoFramework.Presentation.UIElement)">
            <summary>
            Returns the zero-based index of the UIElement. If the UIElement is not
            in the UIElementCollection -1 is returned. If null is passed to the method, the index
            of the first entry with null is returned. If there is no null entry -1 is returned.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:nanoFramework.Presentation.UIElementCollection.Remove(nanoFramework.Presentation.UIElement)">
             <summary>
             Removes the specified element from the UIElementCollection.
             </summary>
             <param name="element">The UIElement to remove from the UIElementCollection.</param>
             <remarks>
             The UIElements that follow the removed UIElements move up to occupy
             the vacated spot. The indexes of the UIElements that are moved are
             also updated.
            
             If element is null then the first null entry is removed. Note that removing
             a null entry is linear in the size of the collection.
             </remarks>
        </member>
        <member name="M:nanoFramework.Presentation.UIElementCollection.Contains(nanoFramework.Presentation.UIElement)">
            <summary>
            Determines whether a element is in the UIElementCollection.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:nanoFramework.Presentation.UIElementCollection.Clear">
            <summary>
            Removes all elements from the UIElementCollection.
            </summary>
            <remarks>
            Count is set to zero. Capacity remains unchanged.
            To reset the capacity of the UIElementCollection, call TrimToSize
            or set the Capacity property directly.
            </remarks>
        </member>
        <member name="M:nanoFramework.Presentation.UIElementCollection.Insert(System.Int32,nanoFramework.Presentation.UIElement)">
             <summary>
             Inserts an element into the UIElementCollection at the specified index.
             </summary>
             <param name="index">The zero-based index at which value should be inserted.</param>
             <param name="element">The UIElement to insert. </param>
             <exception cref="T:System.ArgumentOutOfRangeException">
             index is less than zero.
            
             -or-
            
             index is greater than Count.
             </exception>
             <remarks>
             If Count already equals Capacity, the capacity of the
             UIElementCollection is increased before the new UIElement
             is inserted.
            
             If index is equal to Count, value is added to the
             end of UIElementCollection.
            
             The UIElements that follow the insertion point move down to
             accommodate the new UIElement. The indexes of the UIElements that are
             moved are also updated.
             </remarks>
        </member>
        <member name="M:nanoFramework.Presentation.UIElementCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the UIElement at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero
            - or - index is equal or greater than count.</exception>
            <remarks>
            The UIElements that follow the removed UIElements move up to occupy
            the vacated spot. The indexes of the UIElements that are moved are
            also updated.
            </remarks>
        </member>
        <member name="M:nanoFramework.Presentation.UIElementCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of UIElements from the UIElementCollection.
            </summary>
            <param name="index">The zero-based index of the range
            of elements to remove</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index is less than zero.
            -or-
            count is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            index and count do not denote a valid range of elements in the UIElementCollection.
            </exception>
            <remarks>
            The UIElements that follow the removed UIElements move up to occupy
            the vacated spot. The indexes of the UIElements that are moved are
            also updated.
            </remarks>
        </member>
        <member name="M:nanoFramework.Presentation.UIElementCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the UIElementCollection.
            </summary>
            <returns>Enumerator that enumerates the UIElementCollection in order.</returns>
        </member>
        <member name="T:nanoFramework.Presentation.UIElementCollection.Enumerator">
             <summary>
             This is a simple UIElementCollection enumerator that is based on
             the ArrayListEnumeratorSimple that is used for ArrayLists.
            
             The following comment is from the CLR people:
               For a straightforward enumeration of the entire ArrayList,
               this is faster, because it's smaller.  Benchmarks showed
               this.
             </summary>
        </member>
        <member name="M:nanoFramework.Presentation.UIElementCollection.Enumerator.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.UIElementCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.UIElementCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current UIElement.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.UIElementCollection.Enumerator.Current">
            <summary>
            Gets the current UIElement.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.UIElementCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.VerticalAlignment">
            <summary>
            Specifies the vertical alignment of content within a container.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.VerticalAlignment.Top">
            <summary>
            Content is aligned to the top of the container.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.VerticalAlignment.Center">
            <summary>
            Content is aligned to the center of the container.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.VerticalAlignment.Bottom">
            <summary>
            Content is aligned to the bottom of the container.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.VerticalAlignment.Stretch">
            <summary>
            Content is streched in the container.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.Visibility">
            <summary>
            Visibility - Enum which describes 3 possible visibility options.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Visibility.Visible">
            <summary>
            Normally visible.
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Visibility.Hidden">
            <summary>
            Occupies space in the layout, but is not visible (completely transparent).
            </summary>
        </member>
        <member name="F:nanoFramework.Presentation.Visibility.Collapsed">
            <summary>
            Not visible and does not occupy any space in layout, as if it doesn't exist.
            </summary>
        </member>
        <member name="T:nanoFramework.Presentation.Window">
            <summary>
            Represents a window control for displaying content on the screen.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Window.#ctor">
            <summary>
                Constructs a window object
            </summary>
            <remarks>
                Automatic determination of current Dispatcher. Use alternative constructor
                that accepts a Dispatcher for best performance.
            REFACTOR -- consider specifying app default window sizes to cover Aux case for default window size.
            </remarks>
                Initializes the Width/Height, Top/Left properties to use windows
                default. Updates Application object properties if inside app.
        </member>
        <member name="M:nanoFramework.Presentation.Window.Close">
            <summary>
            Closes the window.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Window.SizeToContent">
            <summary>
            Auto size Window to its content's size
            </summary>
            <remarks>
            1. SizeToContent can be applied to Width Height independently
            2. After SizeToContent is set, setting Width/Height does not take affect if that
               dimension is sizing to content.
            </remarks>
            <value>
            Default value is SizeToContent.Manual
            </value>
        </member>
        <member name="P:nanoFramework.Presentation.Window.Top">
            <summary>
            Gets or sets the distance between the top of the window and the top of the screen.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Window.Left">
            <summary>
            Gets or sets the distance between the left edge of the window and the left edge of the screen.
            </summary>
        </member>
        <member name="P:nanoFramework.Presentation.Window.Topmost">
            <summary>
            Gets or sets a value that indicates whether the window always appears on top of other windows.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.Window.MeasureOverride(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
                Measurement override. Implements content sizing logic.
            </summary>
            <param name="availableWidth">The available width.</param>
            <param name="availableHeight">The available height.</param>
            <param name="desiredWidth">The desired width.</param>
            <param name="desiredHeight">The desired height.</param>
            <remarks>
                Deducts the frame size from the constraint and then passes it on
                to it's child.  Only supports one Visual child (just like control)
            </remarks>
        </member>
        <member name="M:nanoFramework.Presentation.Window.ArrangeOverride(System.Int32,System.Int32)">
            <summary>
                ArrangeOverride allows for the customization of the positioning of children.
            </summary>
            <param name="arrangeWidth">The width of the CustomControl.</param>
            <param name="arrangeHeight">The height of the CustomControl.</param>
            <remarks>
                Deducts the frame size of the window from the constraint and then
                arranges it's child.  Supports only one child.
            </remarks>
        </member>
        <member name="T:nanoFramework.Presentation.PostRenderEventHandler">
            <summary>
            Delegate for handling post render events.
            </summary>
            <param name="dc">The drawing context.</param>
        </member>
        <member name="T:nanoFramework.Presentation.WindowManager">
            <summary>
            Provides a container for windows and manages rendering and focus.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.WindowManager.#ctor">
            <summary>
            Initializes a new instance of the WindowManager class.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.WindowManager.EnsureInstance">
            <summary>
            Ensures that there is an instance of the WindowManager class.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.WindowManager.MeasureOverride(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Measures the child elements of the WindowManager.
            </summary>
            <param name="availableWidth">The available width.</param>
            <param name="availableHeight">The available height.</param>
            <param name="desiredWidth">The desired width.</param>
            <param name="desiredHeight">The desired height.</param>
        </member>
        <member name="M:nanoFramework.Presentation.WindowManager.SetTopMost(nanoFramework.Presentation.Window)">
            <summary>
            Sets the specified window to be the topmost window.
            </summary>
            <param name="window">The window to set as topmost.</param>
        </member>
        <member name="M:nanoFramework.Presentation.WindowManager.IsTopMost(nanoFramework.Presentation.Window)">
            <summary>
            Determines if the specified window is the topmost window.
            </summary>
            <param name="window">The window to check.</param>
            <returns>true if the specified window is the topmost window; otherwise, false.</returns>
        </member>
        <member name="M:nanoFramework.Presentation.WindowManager.OnChildrenChanged(nanoFramework.Presentation.UIElement,nanoFramework.Presentation.UIElement,System.Int32)">
            <summary>
            Called when a child element is added or removed from the WindowManager.
            </summary>
            <param name="added">The child element that was added.</param>
            <param name="removed">The child element that was removed.</param>
            <param name="indexAffected">The index of the child element that was affected.</param>
        </member>
        <member name="F:nanoFramework.Presentation.WindowManager.Instance">
            <summary>
            Gets or sets the WindowManager instance.
            </summary>
        </member>
        <member name="E:nanoFramework.Presentation.WindowManager.PostRender">
            <summary>
            Occurs when post-rendering is performed on the WindowManager.
            </summary>
        </member>
        <member name="M:nanoFramework.Presentation.WindowManager.RenderRecursive(nanoFramework.Presentation.Media.DrawingContext)">
            <summary>
            Represents the method that handles post-rendering of the WindowManager.
            </summary>
            <param name="dc">The DrawingContext to use for post-rendering.</param>
        </member>
        <member name="T:nanoFramework.Runtime.Events.GenericEventEx">
            <summary>
            Creates an instance of the <see cref="T:nanoFramework.Runtime.Events.GenericEvent"/> class.
            </summary>
        </member>
        <member name="F:nanoFramework.Runtime.Events.GenericEventEx.X">
            <summary>
            Specifies additional position information.
            </summary>
        </member>
        <member name="F:nanoFramework.Runtime.Events.GenericEventEx.Y">
            <summary>
            Specifies additional position information.
            </summary>
        </member>
    </members>
</doc>
